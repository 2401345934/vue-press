import{_ as e,z as n,A as a,a6 as s}from"./framework.fef63301.js";const i={},r=s(`<h1 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h1><h2 id="npm-中的依赖包" tabindex="-1"><a class="header-anchor" href="#npm-中的依赖包" aria-hidden="true">#</a> npm 中的依赖包</h2><h3 id="依赖包分类" tabindex="-1"><a class="header-anchor" href="#依赖包分类" aria-hidden="true">#</a> 依赖包分类</h3><ul><li>dependencies - 业务依赖</li><li>devDependencies - 开发依赖</li><li>peerDependencies - 同伴依赖</li><li>bundledDependencies / bundleDependencies - 打包依赖</li><li>optionalDependencies - 可选依赖</li><li>作为npm的使用者，我们常用的依赖是dependencies和devDependencies，剩下三种依赖则是作为包的发布者才会使用到的字段。</li></ul><h2 id="项目版本号管理" tabindex="-1"><a class="header-anchor" href="#项目版本号管理" aria-hidden="true">#</a> 项目版本号管理</h2><p>package.json中的version字段代表的是该项目的版本号。每当项目发布新版本时，需要将version字段进行相应的更新以便后期维护。虽然可以手动的修改vsersion字段，但是为了整个发布过程的自动化，尽量使用 npm version 指令来自动更新version：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm <span class="token function">version</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token number">1.2</span><span class="token number">.3</span>   <span class="token comment">// 显示设置版本号为 1.2.3</span>
npm version major   <span class="token comment">// 大版本号加 1，其余版本号归 0</span>
npm version minor   <span class="token comment">// 小版本号加 1，修订号归 0</span>
npm version patch   <span class="token comment">// 修订号加 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示的设置版本号时，版本号必须符合semver规范，允许在版本号前加上个v标识。</p><h2 id="预发版本" tabindex="-1"><a class="header-anchor" href="#预发版本" aria-hidden="true">#</a> 预发版本</h2><h3 id="当前版本号为-1-2-3" tabindex="-1"><a class="header-anchor" href="#当前版本号为-1-2-3" aria-hidden="true">#</a> 当前版本号为 1.2.3</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm version prepatch  <span class="token comment">// 版本号变为 1.2.4-0，也就是 1.2.4 版本的第一个预发布版本</span>
npm version preminor  <span class="token comment">// 版本号变为 1.3.0-0，也就是 1.3.0 版本的第一个预发布版本</span>
npm version premajor  <span class="token comment">// 版本号变为 2.0.0-0，也就是 2.0.0 版本的第一个预发布版本</span>
npm version prerelease  <span class="token comment">// 版本号变为 2.0.0-1，也就是使预发布版本号加一</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在git环境中-执行npm-version修改完版本号以后-还会默认执行git-add-git-commit-git-tag操作" tabindex="-1"><a class="header-anchor" href="#在git环境中-执行npm-version修改完版本号以后-还会默认执行git-add-git-commit-git-tag操作" aria-hidden="true">#</a> 在git环境中，执行npm version修改完版本号以后，还会默认执行git add-&gt;git commit-&gt;git tag操作</h3><ul><li>如果git工作区还有未提交的修改，npm version将会执行失败，可以加上-f/--force后缀来强制执行。</li><li>如果不想让npm version指令影响你的git仓库，可以在指令中使用--no-git-tag-version参数：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm <span class="token operator">--</span>no<span class="token operator">-</span>git<span class="token operator">-</span>tag<span class="token operator">-</span>version version xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14),d=[r];function t(c,o){return n(),a("div",null,d)}const l=e(i,[["render",t],["__file","index.html.vue"]]);export{l as default};
