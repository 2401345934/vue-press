import{_ as o,z as a,A as i,X as e,C as c,T as l,a6 as p,Q as s}from"./framework.fef63301.js";const d={},t=e("h1",{id:"npm-ci和npm-install区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#npm-ci和npm-install区别","aria-hidden":"true"},"#"),c(" npm ci和npm install区别")],-1),m={href:"https://docs.npmjs.com/cli/v7/commands/npm-ci",target:"_blank",rel:"noopener noreferrer"},r=p('<p><code>npm ci</code> 和 <code>npm install</code>类似，不同之处在于<code>npm ci</code>旨在用于自动化环境，例如测试平台、持续集成和部署，或者您希望确保对依赖项进行全新安装。</p><p><code>npm ci</code> 在以下情况下会明显更快：</p><ul><li>有一个 package-lock.json 或 npm-shrinkwrap.json 文件</li><li>node_modules 不存在或为空目录</li></ul><p><code>npm install</code> 和 <code>npm ci</code> 的主要区别:</p><ul><li>项目必须有 package-lock.json 或 npm-shrinkwrap.json，否则无法使用<code>npm ci</code></li><li>如果 package-lock.json 中的依赖项与 package.json 中的依赖项不匹配，则 <code>npm ci</code> 将退出并显示错误，而不是更新 package-lock.json。</li><li><code>npm ci</code> 一次只能安装整个项目：无法添加单个依赖项。</li><li><code>npm ci</code> 开始安装之前自动删除node_modules文件夹。</li><li><code>npm ci</code>不会更改package.json和package-lock.json</li></ul><h5 id="由此我们知道-当我们进行ci-cd或生产发布时-最好使用npm-ci-它会严格按照package-lock-json中指定版本进行安装-并且会对比package-lock-json和package-json依赖-防止由错误的依赖版本造成的故障" tabindex="-1"><a class="header-anchor" href="#由此我们知道-当我们进行ci-cd或生产发布时-最好使用npm-ci-它会严格按照package-lock-json中指定版本进行安装-并且会对比package-lock-json和package-json依赖-防止由错误的依赖版本造成的故障" aria-hidden="true">#</a> 由此我们知道，当我们进行CI/CD或生产发布时，最好使用<code>npm ci</code>，它会严格按照package-lock.json中指定版本进行安装，并且会对比package-lock.json和package.json依赖，防止由错误的依赖版本造成的故障</h5>',6);function k(_,h){const n=s("ExternalLinkIcon");return a(),i("div",null,[t,e("p",null,[c("npm大家肯定都使用过，可能会有一些不经常使用的命令，npm ci和npm install都可以用来安装依赖，他们之间有什么区别呢？"),e("a",m,[c("官方文档"),l(n)])]),r])}const g=o(d,[["render",k],["__file","index.html.vue"]]);export{g as default};
