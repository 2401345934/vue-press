import{_ as e,z as o,A as c,X as s,C as n,T as t,a6 as p,Q as i}from"./framework.fef63301.js";const l={},u=p(`<h1 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式</h1><h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h2><p>假设我们在开发一款外卖网站，进入网站的时候，第一步需要去请求后端接口得到用户的常用外卖地址。然后再去请求其他接口、渲染页面。如果什么都不考虑可能会直接这样写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// getAddress 异步请求</span>
<span class="token comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span>
<span class="token comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span>

<span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> address <span class="token operator">=</span> res<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
  <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
  <span class="token constant">B</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
  <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时页面里多了一个模块 <code>D</code> ，同样需要拿到地址后进行下一步操作，我们只好去翻请求地址的代码把 <code>D</code> 模块的调用补上。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// getAddress 异步请求</span>
<span class="token comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span>
<span class="token comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span>

<span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> address <span class="token operator">=</span> res<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
  <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
  <span class="token constant">B</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
  <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
  <span class="token constant">D</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到各个模块和获取地址模块耦合严重，<code>A</code>、<code>B</code>、<code>C</code> 模块有变化或者有新增模块，都需要深入到获取地址的代码去修改，一不小心可能就改出问题了。</p><p>此时就需要观察者模式了。</p><h2 id="设计模式定义" tabindex="-1"><a class="header-anchor" href="#设计模式定义" aria-hidden="true">#</a> 设计模式定义</h2>`,9),d={href:"https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObserver_pattern%23cite_note-5",title:"https://en.wikipedia.org/wiki/Observer_pattern#cite_note-5",target:"_blank",rel:"noopener noreferrer"},k=s("strong",null,"observer pattern",-1),r={href:"https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSoftware_design_pattern",title:"https://en.wikipedia.org/wiki/Software_design_pattern",target:"_blank",rel:"noopener noreferrer"},v={href:"https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObject_(computer_science)%23Objects_in_object-oriented_programming",title:"https://en.wikipedia.org/wiki/Object_(computer_science)#Objects_in_object-oriented_programming",target:"_blank",rel:"noopener noreferrer"},m=s("strong",null,"subject",-1),b=s("strong",null,"observers",-1),g={href:"https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMethod_(computer_science)",title:"https://en.wikipedia.org/wiki/Method_(computer_science)",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>很好理解的一个设计模式，有一个 <code>subject</code> 对象，然后有很多 <code>observers</code> 观察者对象，当 <code>subject</code> 对象有变化的时候去通知 <code>observer</code> 对象即可。</p><p>再看一下 <code>UML</code> 图和时序图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33ea1b54f55b4565846dcbf43fab5db0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="image-20220127110751274"></p><p>每一个观察者都实现了 <code>update</code> 方法，并且调用 <code>Subject</code> 对象的 <code>attach</code> 方法订阅变化。当 <code>Subject</code> 变化时，调用 <code>Observer</code> 的 <code>update</code> 方法去通知观察者。</p><p>先用 <code>java</code> 写一个简单的例子：</p><p>公众号文章可以看作是 <code>Subject</code> ，会不定期更新。然后每一个用户都是一个 <code>Observer</code> ，订阅公众号，当更新的时候就可以第一时间收到消息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 提取 Subject 的公共部分</span>
abstract <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Observer<span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Observer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token parameter">Observer observer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token parameter">Observer observer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 具体的公众号，提供写文章和得到文章</span>
<span class="token keyword">class</span> <span class="token class-name">WindLiang</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String post<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writePost</span><span class="token punctuation">(</span><span class="token parameter">String p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        post <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> post<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 小明</span>
<span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> WindLiang subject<span class="token punctuation">;</span>

    <span class="token function">XiaoMing</span><span class="token punctuation">(</span><span class="token parameter">WindLiang sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subject <span class="token operator">=</span> sub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    @Override
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String post <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我收到了&quot;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&quot; 并且点了个赞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 小杨</span>
<span class="token keyword">class</span> <span class="token class-name">XiaoYang</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> WindLiang subject<span class="token punctuation">;</span>

    <span class="token function">XiaoYang</span><span class="token punctuation">(</span><span class="token parameter">WindLiang sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subject <span class="token operator">=</span> sub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    @Override
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String post <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我收到了&quot;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&quot; 并且转发了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 小刚</span>
<span class="token keyword">class</span> <span class="token class-name">XiaoGang</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> WindLiang subject<span class="token punctuation">;</span>

    <span class="token function">XiaoGang</span><span class="token punctuation">(</span><span class="token parameter">WindLiang sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subject <span class="token operator">=</span> sub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    @Override
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String post <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我收到了&quot;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&quot; 并且收藏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">String<span class="token punctuation">[</span><span class="token punctuation">]</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        WindLiang windliang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindLiang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Subject</span>
        XiaoMing xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span>windliang<span class="token punctuation">)</span><span class="token punctuation">;</span>
        XiaoYang xiaoYang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoYang</span><span class="token punctuation">(</span>windliang<span class="token punctuation">)</span><span class="token punctuation">;</span>
        XiaoGang xiaoGang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoGang</span><span class="token punctuation">(</span>windliang<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 添加观察者</span>
        windliang<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">)</span><span class="token punctuation">;</span>
        windliang<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>xiaoYang<span class="token punctuation">)</span><span class="token punctuation">;</span>
        windliang<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>xiaoGang<span class="token punctuation">)</span><span class="token punctuation">;</span>

        windliang<span class="token punctuation">.</span><span class="token function">writePost</span><span class="token punctuation">(</span><span class="token string">&quot;新文章-观察者模式，balabala&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新文章</span>
        windliang<span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知观察者</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea29a41eb26d46d1957e203f6c81a06a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></p><p>上边的实现主要是为了符合最原始的定义，调用 <code>update</code> 的时候没有传参。如果观察者需要的参数是一致的，其实这里也可以直接把更新后的数据传过去，这样观察者就不需要向上边一样再去调用 <code>subject.getPost()</code> 手动拿更新后的数据了。</p><p>这两种不同的方式前者叫做拉 <code>(pull)</code> 模式，就是收到 <code>Subject</code> 的通知后，通过内部的 <code>Subject</code> 对象调用相应的方法去拿到需要的数据。</p><p>后者叫做推 <code>(push)</code> 模式，<code>Subject</code> 更新的时候就将数据推给观察者，观察者直接使用即可。</p><p>下边用 <code>js</code> 改写为推模式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">WindLiang</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> post <span class="token operator">=</span> <span class="token string">&quot;还没更新&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">attach</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">detach</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> findIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    findIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>findIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>findIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">writePost</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            post <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> XiaoMing <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我收到了&quot;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&quot; 并且点了个赞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> XiaoYang <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我收到了&quot;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&quot; 并且转发了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> XiaoGang <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我收到了&quot;</span> <span class="token operator">+</span> post <span class="token operator">+</span> <span class="token string">&quot; 并且收藏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


windliang <span class="token operator">=</span> <span class="token function">WindLiang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

windliang<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>XiaoMing<span class="token punctuation">.</span>update<span class="token punctuation">)</span>
windliang<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>XiaoYang<span class="token punctuation">.</span>update<span class="token punctuation">)</span>
windliang<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>XiaoGang<span class="token punctuation">.</span>update<span class="token punctuation">)</span>

windliang<span class="token punctuation">.</span><span class="token function">writePost</span><span class="token punctuation">(</span><span class="token string">&quot;新文章-观察者模式，balabala&quot;</span><span class="token punctuation">)</span>
windliang<span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>js</code> 中，我们可以直接将 <code>update</code> 方法传给 <code>Subject</code> ，同时采取推模式，调用 <code>update</code> 的时候直接将数据传给观察者，看起来会简洁很多。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><p>回到开头的场景，我们可以利用观察者模式将获取地址后的一系列后续操作解耦出来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span>
<span class="token comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span>
<span class="token keyword">const</span> observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// 注册观察者</span>
observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>update<span class="token punctuation">)</span>
observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>
obervers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">.</span>change<span class="token punctuation">)</span>

<span class="token comment">// getAddress 异步请求</span>
<span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> address <span class="token operator">=</span> res<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
  observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">update</span> <span class="token operator">=&gt;</span> <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过观察者模式我们将获取地址后的操作解耦了出来，未来有新增模块只需要注册观察者即可。</p><p>当 <code>getAddress</code> 很复杂的时候，通过观察者模式会使得未来的改动变得清晰，不会影响到 <code>getAddress</code> 的逻辑。</p><p>必要的话也可以把 <code>observers</code> 抽离到一个新的文件作为一个新模块，防止让一个文件变得过于臃肿。</p>`,21);function w(h,y){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("可以看下 "),s("a",d,[n("维基百科"),t(a)]),n("的介绍：")]),s("blockquote",null,[s("p",null,[n("The "),k,n(" is a "),s("a",r,[n("software design pattern"),t(a)]),n(" in which an "),s("a",v,[n("object"),t(a)]),n(", named the "),m,n(", maintains a list of its dependents, called "),b,n(", and notifies them automatically of any state changes, usually by calling one of their "),s("a",g,[n("methods"),t(a)]),n(".")])]),f])}const _=e(l,[["render",w],["__file","index.html.vue"]]);export{_ as default};
