import{_ as n,z as s,A as a,a6 as t}from"./framework.fef63301.js";const p={},e=t(`<h1 id="静态提升" tabindex="-1"><a class="header-anchor" href="#静态提升" aria-hidden="true">#</a> 静态提升</h1><h2 id="hoiststatic" tabindex="-1"><a class="header-anchor" href="#hoiststatic" aria-hidden="true">#</a> hoistStatic</h2><ul><li>节点转换完毕之后 会判断编译配置中是否配置了 hoistStatic 如果配置了就会执行 hoistStatic 做静态提升</li><li>静态提升是 vue3 编译阶段的一个优化策略</li><li>因为静态节点不依赖动态数据 一旦创建了就不会改变 所以 只有静态节点才能被提升到外部创建</li><li>主要操作就是从 根节点开始 通过深度优化的方式递归遍历节点并做判断</li><li>如果一个节点是一个元素节点 会通过 getConstantType 获取节点的常量类型</li></ul><h2 id="getconstanttype" tabindex="-1"><a class="header-anchor" href="#getconstanttype" aria-hidden="true">#</a> getConstantType</h2><ul><li>会根据节点类型的不同 返回不同的值</li><li>对于文本和注释节点 返回 3 CAN_STRINGIFY</li><li>对于元素节点 会判断节点自身以及它子元素的类型 属性类型 再去决定它的常量类型 <ul><li>如果发现没有任何动态数据 就是可以被静态提升的</li></ul></li><li>虽然有的节点会包含一些动态节点 但是本身的静态属性还是可以被静态提升的</li><li>如果节点满足可以被静态提升的条件 节点对应的 codegenNode 会通过执行 context.hoist 将其修改为一个简单的表达式节点</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getConstantType</span><span class="token punctuation">(</span>
  node<span class="token operator">:</span> TemplateChildNode <span class="token operator">|</span> SimpleExpressionNode<span class="token punctuation">,</span>
  context<span class="token operator">:</span> TransformContext
<span class="token punctuation">)</span><span class="token operator">:</span> ConstantTypes <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> constantCache <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tagType <span class="token operator">!==</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> cached <span class="token operator">=</span> constantCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cached
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> codegenNode <span class="token operator">=</span> node<span class="token punctuation">.</span>codegenNode<span class="token operator">!</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>codegenNode<span class="token punctuation">.</span>type <span class="token operator">!==</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        codegenNode<span class="token punctuation">.</span>isBlock <span class="token operator">&amp;&amp;</span>
        node<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;svg&#39;</span> <span class="token operator">&amp;&amp;</span>
        node<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;foreignObject&#39;</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">getPatchFlag</span><span class="token punctuation">(</span>codegenNode<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> returnType <span class="token operator">=</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span>

        <span class="token comment">// Element itself has no patch flag. However we still need to check:</span>

        <span class="token comment">// 1. Even for a node with no patch flag, it is possible for it to contain</span>
        <span class="token comment">// non-hoistable expressions that refers to scope variables, e.g. compiler</span>
        <span class="token comment">// injected keys or cached event handlers. Therefore we need to always</span>
        <span class="token comment">// check the codegenNode&#39;s props to be sure.</span>
        <span class="token keyword">const</span> generatedPropsType <span class="token operator">=</span> <span class="token function">getGeneratedPropsConstantType</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>generatedPropsType <span class="token operator">===</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          constantCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>generatedPropsType <span class="token operator">&lt;</span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          returnType <span class="token operator">=</span> generatedPropsType
        <span class="token punctuation">}</span>

        <span class="token comment">// 2. its children.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> childType <span class="token operator">=</span> <span class="token function">getConstantType</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>childType <span class="token operator">===</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            constantCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>childType <span class="token operator">&lt;</span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            returnType <span class="token operator">=</span> childType
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0</span>
        <span class="token comment">// type, check if any of the props can cause the type to be lowered</span>
        <span class="token comment">// we can skip can_patch because it&#39;s guaranteed by the absence of a</span>
        <span class="token comment">// patchFlag.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>returnType <span class="token operator">&gt;</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_SKIP_PATCH</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span>props<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;bind&#39;</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">const</span> expType <span class="token operator">=</span> <span class="token function">getConstantType</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>exp<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>expType <span class="token operator">===</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                constantCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>expType <span class="token operator">&lt;</span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                returnType <span class="token operator">=</span> expType
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// only svg/foreignObject could be block here, however if they are</span>
        <span class="token comment">// static then they don&#39;t need to be blocks since there will be no</span>
        <span class="token comment">// nested updates.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>codegenNode<span class="token punctuation">.</span>isBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// except set custom directives.</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span>props<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              constantCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span>
              <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          context<span class="token punctuation">.</span><span class="token function">removeHelper</span><span class="token punctuation">(</span><span class="token constant">OPEN_BLOCK</span><span class="token punctuation">)</span>
          context<span class="token punctuation">.</span><span class="token function">removeHelper</span><span class="token punctuation">(</span>
            <span class="token function">getVNodeBlockHelper</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>inSSR<span class="token punctuation">,</span> codegenNode<span class="token punctuation">.</span>isComponent<span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
          codegenNode<span class="token punctuation">.</span>isBlock <span class="token operator">=</span> <span class="token boolean">false</span>
          context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token function">getVNodeHelper</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>inSSR<span class="token punctuation">,</span> codegenNode<span class="token punctuation">.</span>isComponent<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        constantCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span>
        <span class="token keyword">return</span> returnType
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        constantCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token operator">:</span>
      <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span><span class="token operator">:</span>
      <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT_CALL</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">getConstantType</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token operator">:</span>
      <span class="token keyword">return</span> node<span class="token punctuation">.</span>constType
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token operator">:</span>
      <span class="token keyword">let</span> returnType <span class="token operator">=</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSymbol</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> childType <span class="token operator">=</span> <span class="token function">getConstantType</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>childType <span class="token operator">===</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childType <span class="token operator">&lt;</span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          returnType <span class="token operator">=</span> childType
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> returnType
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> exhaustiveCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> node
        exhaustiveCheck
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态提升的成本" tabindex="-1"><a class="header-anchor" href="#静态提升的成本" aria-hidden="true">#</a> 静态提升的成本</h2><ul><li>静态提升过程最终结果还是修改了可以被静态提升的节点的 codegenNode</li><li>静态提升创建的节点 放在的 render 函数的外部</li><li>render 函数内部时钟会保持对静态节点的引用 导致的后果就是 组件即使销毁 静态提升的节点所占用的内存不会释放</li><li>静态提升是空间换时间的优化手段 相比于被占用的内存成本 性能方面的提升会给用户带来更多的收益</li></ul>`,8),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
