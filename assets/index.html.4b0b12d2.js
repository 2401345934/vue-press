import{_ as n,z as s,A as a,a6 as t}from"./framework.fef63301.js";const p={},o=t(`<h1 id="需要了解的nodejs知识-工具模块" tabindex="-1"><a class="header-anchor" href="#需要了解的nodejs知识-工具模块" aria-hidden="true">#</a> 需要了解的nodejs知识（工具模块）</h1><h2 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> Util</h2><p>Node.js 的工具模块</p><h3 id="常用的判断属性-在util-types对象" tabindex="-1"><a class="header-anchor" href="#常用的判断属性-在util-types对象" aria-hidden="true">#</a> 常用的判断属性，在util.types对象</h3><ul><li>isDate：判断是否是日期格式的变量</li><li>isAnyArrayBuffer：判断是否是buffer</li><li>isAsyncFunction：判断函数是否是异步的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// types: 判断变量/函数的一些类型</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>isAnyArrayBuffer<span class="token punctuation">,</span>isAsyncFunction<span class="token punctuation">,</span>isDate<span class="token punctuation">}</span> <span class="token operator">=</span> util<span class="token punctuation">.</span>types
<span class="token comment">// isDate</span>
<span class="token keyword">const</span> is_date <span class="token operator">=</span> <span class="token function">isDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> is_date2 <span class="token operator">=</span> <span class="token function">isDate</span><span class="token punctuation">(</span><span class="token string">&#39;2022-09-01&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;is_date2: &#39;</span><span class="token punctuation">,</span> is_date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;is_date: &#39;</span><span class="token punctuation">,</span> is_date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// isAnyArrayBuffer</span>
<span class="token keyword">const</span> isBuff1 <span class="token operator">=</span> <span class="token function">isAnyArrayBuffer</span><span class="token punctuation">(</span><span class="token string">&#39;buffer&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isBuff1: &#39;</span><span class="token punctuation">,</span> isBuff1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isBuff2 <span class="token operator">=</span> <span class="token function">isAnyArrayBuffer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isBuff2: &#39;</span><span class="token punctuation">,</span> isBuff2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// isAsyncFunction</span>
<span class="token keyword">const</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token keyword">const</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token keyword">const</span> isAsyncFunc <span class="token operator">=</span> <span class="token function">isAsyncFunction</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span>
<span class="token keyword">const</span> isAsyncFunc2 <span class="token operator">=</span> <span class="token function">isAsyncFunction</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isAsyncFunc2: &#39;</span><span class="token punctuation">,</span> isAsyncFunc2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isAsyncFunc: &#39;</span><span class="token punctuation">,</span> isAsyncFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用的方法和属性" tabindex="-1"><a class="header-anchor" href="#常用的方法和属性" aria-hidden="true">#</a> 常用的方法和属性</h3><ul><li>format:格式化字符串</li><li>inspect: 将对象转为字符串</li><li>isDeepStrictEqual：判断两个字符是否强相等，相当于===</li><li>deprecate：将函数包装为弃用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// inspect</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;inspect&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">date</span><span class="token operator">:</span><span class="token string">&#39;2022-09-01&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str: &#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 格式化字符串util.format(arg1,arg2,arg3,arg4)</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;%s:%s&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;34&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;56&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str2: &#39;</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// deprecate</span>
util<span class="token punctuation">.</span><span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is a deprecate func&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// isDeepStrictEqual </span>
<span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span>
<span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isEqual <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">isDeepStrictEqual</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isEqual: &#39;</span><span class="token punctuation">,</span> isEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1 <span class="token operator">==</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1 <span class="token operator">===</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h2><p>Node.js DNS 模块用于解析域名</p><ul><li>DNS(Domain Name System): 域名系统、 <ul><li>组成：他是由解析器和域名服务器组成</li><li>作用：域名解析，将域名转换成IP地址，将IP地址转换成域名列表</li></ul></li><li>nodejs中DNS支持域名和对应IP地址的相互解析，主要代码如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> dns <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;dns&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//lookup（底层系统工具进行）：将域名（比如 &#39;runoob.com&#39;）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。</span>
<span class="token keyword">const</span> hostname <span class="token operator">=</span> <span class="token string">&quot;www.runoob.com&quot;</span><span class="token punctuation">;</span>
dns<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> address<span class="token punctuation">,</span> famliy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hostname <span class="token operator">+</span> <span class="token string">&quot;绑定的IP地址为：&quot;</span> <span class="token operator">+</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//lookupService：实现给定的ip地址和端口号，解析为对应的域名</span>
dns<span class="token punctuation">.</span><span class="token function">lookupService</span><span class="token punctuation">(</span><span class="token string">&quot;104.20.23.46&quot;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> service</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;主机：&quot;</span> <span class="token operator">+</span> hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;协议：&quot;</span> <span class="token operator">+</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//resolve：使用网络域名系统</span>
dns<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;nodejs.org&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> address</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolve address: &#39;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// reverse：反向解析 IP 地址，指向该 IP 地址的域名数组。</span>
<span class="token keyword">const</span> ip <span class="token operator">=</span> <span class="token string">&quot;192.30.252.130&quot;</span><span class="token punctuation">;</span>
dns<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> hostnames</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ip <span class="token operator">+</span> <span class="token string">&quot;IP绑定的语言数组为：&quot;</span> <span class="token operator">+</span> hostnames<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回当前正在使用的ip地址</span>
<span class="token keyword">const</span> servers <span class="token operator">=</span> dns<span class="token punctuation">.</span><span class="token function">getServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;current server ip address: &quot;</span><span class="token punctuation">,</span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os" tabindex="-1"><a class="header-anchor" href="#os" aria-hidden="true">#</a> OS</h2><p>Node.js OS 模块提供了一些基本系统操作函数</p><h3 id="常用的方法和属性-1" tabindex="-1"><a class="header-anchor" href="#常用的方法和属性-1" aria-hidden="true">#</a> 常用的方法和属性</h3><ul><li>networkInterfaces获取网络信息</li><li>cpus：获取系统的CPU内核细腻，返回个数组</li><li>totalmem：系统总共内存容量</li><li>freemem：系统空余内存变量</li><li>hostname：系统主机名</li><li>version: 系统内核版本的字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> os <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;系统所有内存变量为（单位M）：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">totalmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;系统空余内存变量为（单位M）：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">freemem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;系统主机名：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">hostname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;系统主机内核版本：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>platform: 主机操作系统平摊</li><li>type: 主机的操作系统平台名称,可能的值为&#39;aix&#39;、&#39;darwin&#39;、&#39;freebsd&#39;、&#39;linux&#39;、&#39;openbsd&#39;、&#39;sunos&#39;、以及 &#39;win32&#39;。</li><li>uptime: 操作系统正常运行时间</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;主机的平台：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;主机的平台名称：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;主机的x正常运行时间：&#39;</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">uptime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h2><p>nodejs用来处理文件路径的工具模块，主要处理绝对路径，相对路径</p><h3 id="常用的方法和属性-2" tabindex="-1"><a class="header-anchor" href="#常用的方法和属性-2" aria-hidden="true">#</a> 常用的方法和属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//属性- 平台路径的分隔符</span>
<span class="token keyword">const</span> sep <span class="token operator">=</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sep: &#39;</span><span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//属性- 分隔符获取</span>
<span class="token keyword">const</span> delimiter <span class="token operator">=</span> path<span class="token punctuation">.</span>delimiter<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delimiter: &#39;</span><span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//属性- 提供上述 path 的方法，不过总是以 win32 兼容的方式交互。</span>
<span class="token keyword">const</span> win32 <span class="token operator">=</span> path<span class="token punctuation">.</span>win32<span class="token punctuation">;</span>
<span class="token comment">// console.log(&#39;win32: &#39;, win32);</span>

<span class="token comment">// resolve参数解析为绝对路径</span>
<span class="token keyword">const</span> r1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;../&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;r1: &#39;</span><span class="token punctuation">,</span> r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// join参数拼接为一个路径</span>
<span class="token keyword">const</span> j1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span><span class="token string">&#39;http/app.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;j1: &#39;</span><span class="token punctuation">,</span> j1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// path.relative(from, to)用于将绝对路径转为相对路径，返回从 from 到 to 的相对路径（基于当前工作目录）</span>
<span class="token keyword">const</span> r2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>j1<span class="token punctuation">,</span><span class="token string">&#39;http/app.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;rl: &#39;</span><span class="token punctuation">,</span> r2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// isAbsolute判断是否是绝对路径</span>
<span class="token keyword">const</span> isAbs1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isAbs1: &#39;</span><span class="token punctuation">,</span> isAbs1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isAbs2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isAbs2: &#39;</span><span class="token punctuation">,</span> isAbs2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// path.dirname(p):返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。</span>
<span class="token keyword">const</span> dir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dir: &#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// path.basename：返回路径中的最后一部分。同 Unix 命令 bashname 类似。</span>
<span class="token keyword">const</span> basename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;basename: &#39;</span><span class="token punctuation">,</span> basename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// path.extname(p): 返回路径中文件的后缀名，即路径中最后一个&#39;.&#39;之后(包含&#39;.&#39;)的部分。如果一个路径中并不包含&#39;.&#39;或该路径只包含一个&#39;.&#39; 且这个&#39;.&#39;为路径的第一个字符，则此命令返回空字符串。</span>
<span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;extname: &#39;</span><span class="token punctuation">,</span> extname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// path.parse(pathString):返回路径字符串的对象,与path.format相反。</span>
<span class="token keyword">const</span> pathObj <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;D:\\\\demo\\\\demo\\\\nodejs\\\\http\\\\app.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pathObj: &#39;</span><span class="token punctuation">,</span> pathObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// path.format(pathObject):从对象中返回路径字符串，和 path.parse 相反。</span>
<span class="token keyword">const</span> pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>pathObj<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pathStr: &#39;</span><span class="token punctuation">,</span> pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
