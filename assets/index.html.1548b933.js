import{_ as e,z as a,A as i,a6 as r}from"./framework.fef63301.js";const t="/vue-press/assets/vue2-reactive.63d179f9.png",s="/vue-press/assets/vue3-reactive.1a8cf36c.png",l={},c=r('<h1 id="响应式原理总结" tabindex="-1"><a class="header-anchor" href="#响应式原理总结" aria-hidden="true">#</a> 响应式原理总结</h1><ul><li>利用 Proxy 实现了对数据访问和修改的劫持 弥补了 Object.defineProperty 的不足</li><li>响应式的核心实现就是通过数据劫持 <ul><li>在访问数据的时候执行依赖收集</li><li>在修改数据的时候派发通知</li><li>收集的依赖是副作用函数 数据改变后就会触发副作用函数的自动执行</li></ul></li><li>把数据变成响应式 是为了数据在变化的时候自动执行一些逻辑</li><li>组件的渲染中就是让组件访问的数据一旦被修改 就会自动触发组件的重新渲染 实现数据驱动</li></ul><h2 id="vue2-响应式api实现和组件更新之间的关系" tabindex="-1"><a class="header-anchor" href="#vue2-响应式api实现和组件更新之间的关系" aria-hidden="true">#</a> vue2 响应式API实现和组件更新之间的关系</h2><p><img src="'+t+'" alt="图片"></p><h2 id="vue3-响应式api实现和组件更新之间的关系" tabindex="-1"><a class="header-anchor" href="#vue3-响应式api实现和组件更新之间的关系" aria-hidden="true">#</a> vue3 响应式API实现和组件更新之间的关系</h2><p><img src="'+s+'" alt="图片"></p>',6),n=[c];function d(o,h){return a(),i("div",null,n)}const _=e(l,[["render",d],["__file","index.html.vue"]]);export{_ as default};
