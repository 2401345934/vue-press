const e=JSON.parse('{"key":"v-6b602d37","path":"/interview-questions/ts/interview-questions/","title":"面试题集合","lang":"zh-CN","frontmatter":{"createTime":"2022/10/18","tag":"ts"},"excerpt":"","headers":[{"level":2,"title":"什么是TypeScript？","slug":"什么是typescript","link":"#什么是typescript","children":[]},{"level":2,"title":"为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？","slug":"为什么要使用-typescript-typescript-相对于-javascript-的优势是什么","link":"#为什么要使用-typescript-typescript-相对于-javascript-的优势是什么","children":[{"level":3,"title":"优势","slug":"优势","link":"#优势","children":[]}]},{"level":2,"title":"TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？","slug":"typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别","link":"#typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别","children":[]},{"level":2,"title":"TypeScript 中 any 类型的作用是什么？","slug":"typescript-中-any-类型的作用是什么","link":"#typescript-中-any-类型的作用是什么","children":[]},{"level":2,"title":"TypeScript 中 any、never、unknown、null & undefined 和 void 有什么区别？","slug":"typescript-中-any、never、unknown、null-undefined-和-void-有什么区别","link":"#typescript-中-any、never、unknown、null-undefined-和-void-有什么区别","children":[]},{"level":2,"title":"TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明吗？","slug":"typescript-中-interface-可以给-function-array-class-indexable-做声明吗","link":"#typescript-中-interface-可以给-function-array-class-indexable-做声明吗","children":[]},{"level":2,"title":"TypeScript 中可以使用 String、Number、Boolean、Symbol、Object 等给类型做声明吗？","slug":"typescript-中可以使用-string、number、boolean、symbol、object-等给类型做声明吗","link":"#typescript-中可以使用-string、number、boolean、symbol、object-等给类型做声明吗","children":[]},{"level":2,"title":"TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？","slug":"typescript-中的-this-和-javascript-中的-this-有什么差异","link":"#typescript-中的-this-和-javascript-中的-this-有什么差异","children":[]},{"level":2,"title":"TypeScript 中使用 Union Types 时有哪些注意事项？","slug":"typescript-中使用-union-types-时有哪些注意事项","link":"#typescript-中使用-union-types-时有哪些注意事项","children":[]},{"level":2,"title":"TypeScript 如何设计 Class 的声明？","slug":"typescript-如何设计-class-的声明","link":"#typescript-如何设计-class-的声明","children":[]},{"level":2,"title":"TypeScript 中如何联合枚举类型的 Key?","slug":"typescript-中如何联合枚举类型的-key","link":"#typescript-中如何联合枚举类型的-key","children":[]},{"level":2,"title":"TypeScript 中 type 和 interface 的区别?","slug":"typescript-中-type-和-interface-的区别","link":"#typescript-中-type-和-interface-的区别","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]},{"level":2,"title":"TypeScript 中 ?.、??、!、!.、_、** 等符号的含义？","slug":"typescript-中-、-、-、-、-、-等符号的含义","link":"#typescript-中-、-、-、-、-、-等符号的含义","children":[]},{"level":2,"title":"简单介绍一下 TypeScript 模块的加载机制？","slug":"简单介绍一下-typescript-模块的加载机制","link":"#简单介绍一下-typescript-模块的加载机制","children":[]},{"level":2,"title":"简单聊聊你对 TypeScript 类型兼容性的理解？","slug":"简单聊聊你对-typescript-类型兼容性的理解","link":"#简单聊聊你对-typescript-类型兼容性的理解","children":[]},{"level":2,"title":"协变、逆变、双变和抗变的理解？","slug":"协变、逆变、双变和抗变的理解","link":"#协变、逆变、双变和抗变的理解","children":[{"level":3,"title":"协变：X = Y Y 类型可以赋值给 X 类型的情况就叫做协变，也可以说是 X 类型兼容 Y 类型","slug":"协变-x-y-y-类型可以赋值给-x-类型的情况就叫做协变-也可以说是-x-类型兼容-y-类型","link":"#协变-x-y-y-类型可以赋值给-x-类型的情况就叫做协变-也可以说是-x-类型兼容-y-类型","children":[]},{"level":3,"title":"逆变：printY = printX 函数X 类型可以赋值给函数Y 类型，因为函数Y 在调用的时候参数是按照Y类型进行约束的，但是用到的是函数X的X的属性和方法，ts检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质","slug":"逆变-printy-printx-函数x-类型可以赋值给函数y-类型-因为函数y-在调用的时候参数是按照y类型进行约束的-但是用到的是函数x的x的属性和方法-ts检查结果是类型安全的。这种特性就叫做逆变-函数的参数有逆变的性质","link":"#逆变-printy-printx-函数x-类型可以赋值给函数y-类型-因为函数y-在调用的时候参数是按照y类型进行约束的-但是用到的是函数x的x的属性和方法-ts检查结果是类型安全的。这种特性就叫做逆变-函数的参数有逆变的性质","children":[]},{"level":3,"title":"双变（双向协变）：X = Y；Y = X父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.x 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 true 就只支持函数参数的逆变，设置为 false 则支持双向协变）","slug":"双变-双向协变-x-y-y-x父类型可以赋值给子类型-子类型可以赋值给父类型-既逆变又协变-叫做-双向协变-ts2-x-之前支持这种赋值-之后-ts-加了一个编译选项-strictfunctiontypes-设置为-true-就只支持函数参数的逆变-设置为-false-则支持双向协变","link":"#双变-双向协变-x-y-y-x父类型可以赋值给子类型-子类型可以赋值给父类型-既逆变又协变-叫做-双向协变-ts2-x-之前支持这种赋值-之后-ts-加了一个编译选项-strictfunctiontypes-设置为-true-就只支持函数参数的逆变-设置为-false-则支持双向协变","children":[]},{"level":3,"title":"抗变（不变）：非父子类型之间不会发生型变，只要类型不一样就会报错","slug":"抗变-不变-非父子类型之间不会发生型变-只要类型不一样就会报错","link":"#抗变-不变-非父子类型之间不会发生型变-只要类型不一样就会报错","children":[]}]},{"level":2,"title":"TypeScript 中对象展开会有什么副作用吗？","slug":"typescript-中对象展开会有什么副作用吗","link":"#typescript-中对象展开会有什么副作用吗","children":[]},{"level":2,"title":"类型的全局声明和局部声明","slug":"类型的全局声明和局部声明","link":"#类型的全局声明和局部声明","children":[]},{"level":2,"title":"TypeScript 中同名的 interface 或者同名的 interface 和 class 可以合并吗？","slug":"typescript-中同名的-interface-或者同名的-interface-和-class-可以合并吗","link":"#typescript-中同名的-interface-或者同名的-interface-和-class-可以合并吗","children":[]},{"level":2,"title":"如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？","slug":"如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包","link":"#如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包","children":[]},{"level":2,"title":"TypeScript 的 tsconfig.json 中有哪些配置项信息？","slug":"typescript-的-tsconfig-json-中有哪些配置项信息","link":"#typescript-的-tsconfig-json-中有哪些配置项信息","children":[]},{"level":2,"title":"declare，declare global是什么？","slug":"declare-declare-global是什么","link":"#declare-declare-global是什么","children":[]},{"level":2,"title":"对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？","slug":"对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解","link":"#对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解","children":[]},{"level":2,"title":"keyof 和 typeof 关键字的作用？","slug":"keyof-和-typeof-关键字的作用","link":"#keyof-和-typeof-关键字的作用","children":[]},{"level":2,"title":"简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite的作用","slug":"简述工具类型-exclude、omit、merge、intersection、overwrite的作用","link":"#简述工具类型-exclude、omit、merge、intersection、overwrite的作用","children":[]},{"level":2,"title":"数组定义的两种方式","slug":"数组定义的两种方式","link":"#数组定义的两种方式","children":[]}],"git":{"updatedTime":1668147206000,"contributors":[{"name":"alan.xiao","email":"alan.xiao@d1m.cn","commits":1}]},"filePathRelative":"interview-questions/ts/interview-questions/index.md"}');export{e as data};
