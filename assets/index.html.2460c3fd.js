import{_ as s,z as a,A as n,a6 as e}from"./framework.fef63301.js";const p={},o=e(`<h1 id="实现-npm-script-跨平台兼容" tabindex="-1"><a class="header-anchor" href="#实现-npm-script-跨平台兼容" aria-hidden="true">#</a> 实现 npm script 跨平台兼容</h1><p>到目前为止，如果你在 Linux、Mac 平台做开发，所有的 npm script 都会顺利运行，但是 Windows 下面的同学可能就比较痛苦了，因为不是所有的 shell 命令都是跨平台兼容的，甚至各种常见的文件系统操作也是不兼容的。</p><p>可能有部分同学处理过 npm script 跨平台兼容的问题，比如粗暴的为两种平台各写一份 npm script，像下面这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello-npm-script&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;bash-script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo Hello $npm_package_name&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;win-script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo Hello %npm_package_name%&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有技术追求的工程师肯定不会满足上面的解决方案，实际上社区中已经有非常多的小工具可以帮我们优雅的实现跨平台的 npm script，下面我们探索下如何实现跨平台的文件系统操作、变量引用、环境变量设置。</p><p>特别说明，windows 环境的同学建议使用 git bash 来运行 npm script，使用 windows 自带的 cmd 可能会遇到比较多的问题</p><h2 id="文件系统操作的跨平台兼容" tabindex="-1"><a class="header-anchor" href="#文件系统操作的跨平台兼容" aria-hidden="true">#</a> 文件系统操作的跨平台兼容</h2><p>npm script 中涉及到的文件系统操作包括文件和目录的创建、删除、移动、复制等操作，而社区为这些基本操作也提供了跨平台兼容的包，列举如下：</p><ul><li>rimraf 或 del-cli，用来删除文件和目录，实现类似于 rm -rf 的功能；</li><li>cpr，用于拷贝、复制文件和目录，实现类似于 cp -r 的功能；</li><li>make-dir-cli，用于创建目录，实现类似于 mkdir -p 的功能；</li><li>使用上面这几个小工具改造 npm script 的具体步骤如下：</li></ul><h3 id="第-1-步-添加开发依赖" tabindex="-1"><a class="header-anchor" href="#第-1-步-添加开发依赖" aria-hidden="true">#</a> 第 1 步，添加开发依赖</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i rimraf cpr make<span class="token operator">-</span>dir<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span>
# npm install rimraf cpr make<span class="token operator">-</span>dir<span class="token operator">-</span>cli <span class="token operator">--</span>save<span class="token operator">-</span>dev
# yarn add rimraf cpr make<span class="token operator">-</span>dir<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第-2-步-改造涉及文件系统操作的-npm-script" tabindex="-1"><a class="header-anchor" href="#第-2-步-改造涉及文件系统操作的-npm-script" aria-hidden="true">#</a> 第 2 步，改造涉及文件系统操作的 npm script</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
-    <span class="token property">&quot;cover:cleanup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rm -rf coverage &amp;&amp; rm -rf .nyc_output&quot;</span><span class="token punctuation">,</span>
-    <span class="token property">&quot;cover:archive&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-var \\&quot;mkdir -p coverage_archive/$npm_package_version &amp;&amp; cp -r coverage/* coverage_archive/$npm_package_version\\&quot;&quot;</span><span class="token punctuation">,</span>
+    <span class="token property">&quot;cover:cleanup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rimraf coverage &amp;&amp; rimraf .nyc_output&quot;</span><span class="token punctuation">,</span>
+    <span class="token property">&quot;cover:archive&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-var \\&quot;make-dir coverage_archive/$npm_package_version &amp;&amp; cpr coverage/* coverage_archive/$npm_package_version -o\\&quot;&quot;</span><span class="token punctuation">,</span>
     <span class="token property">&quot;cover:serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port&quot;</span><span class="token punctuation">,</span>
     <span class="token property">&quot;cover:open&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-var opn http://localhost:$npm_package_config_port&quot;</span><span class="token punctuation">,</span>
-    <span class="token property">&quot;postcover&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm-run-all cover:archive cover:cleanup --parallel cover:serve cover:open&quot;</span>
+    <span class="token property">&quot;precover&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run cover:cleanup&quot;</span><span class="token punctuation">,</span>
+    <span class="token property">&quot;postcover&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm-run-all cover:archive --parallel cover:serve cover:open&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对改动的几点说明：</p><ul><li>rm -rf 直接替换成 rimraf；</li><li>mkdir -p 直接替换成 make-dir；</li><li>cp -r 的替换需特别说明下，cpr 默认是不覆盖的，需要显示传入 -o 配置项，并且参数必须严格是 cpr source destination [options] 的格式，即配置项放在最后面；</li><li>把 cover:cleanup 从 postcover 挪到 precover 里面去执行，规避 cpr 没归档完毕覆盖率报告就被清空的问题；</li></ul><h2 id="用-cross-var-引用变量" tabindex="-1"><a class="header-anchor" href="#用-cross-var-引用变量" aria-hidden="true">#</a> 用 cross-var 引用变量</h2><h3 id="第-1-步-安装-cross-var-为开发依赖" tabindex="-1"><a class="header-anchor" href="#第-1-步-安装-cross-var-为开发依赖" aria-hidden="true">#</a> 第 1 步，安装 cross-var 为开发依赖</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i cross<span class="token operator">-</span><span class="token keyword">var</span> <span class="token operator">-</span><span class="token constant">D</span>
# npm install cross<span class="token operator">-</span><span class="token keyword">var</span> <span class="token operator">--</span>save<span class="token operator">-</span>dev
# yarn add cross<span class="token operator">-</span><span class="token keyword">var</span> <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第-2-步-改写引用变量-npm-script-具体-diff-如下" tabindex="-1"><a class="header-anchor" href="#第-2-步-改写引用变量-npm-script-具体-diff-如下" aria-hidden="true">#</a> 第 2 步，改写引用变量 npm script，具体 diff 如下</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code> <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token property">&quot;cover:cleanup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rm -rf coverage &amp;&amp; rm -rf .nyc_output&quot;</span><span class="token punctuation">,</span>
-    <span class="token property">&quot;cover:archive&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mkdir -p coverage_archive/$npm_package_version &amp;&amp; cp -r coverage/* coverage_archive/$npm_package_version&quot;</span><span class="token punctuation">,</span>
-    <span class="token property">&quot;cover:serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http-server coverage_archive/$npm_package_version -p $npm_package_config_port&quot;</span><span class="token punctuation">,</span>
-    <span class="token property">&quot;cover:open&quot;</span><span class="token operator">:</span> <span class="token string">&quot;opn http://localhost:$npm_package_config_port&quot;</span><span class="token punctuation">,</span>
+    <span class="token property">&quot;cover:archive&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-var \\&quot;mkdir -p coverage_archive/$npm_package_version &amp;&amp; cp -r coverage/* coverage_archive/$npm_package_version\\&quot;&quot;</span><span class="token punctuation">,</span>
+    <span class="token property">&quot;cover:serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port&quot;</span><span class="token punctuation">,</span>
+    <span class="token property">&quot;cover:open&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-var opn http://localhost:$npm_package_config_port&quot;</span><span class="token punctuation">,</span>
     <span class="token property">&quot;postcover&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm-run-all cover:archive cover:cleanup --parallel cover:serve cover:open&quot;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用-cross-env-设置环境变量" tabindex="-1"><a class="header-anchor" href="#用-cross-env-设置环境变量" aria-hidden="true">#</a> 用 cross-env 设置环境变量</h2><p>在 node.js 脚本和 npm script 使用环境变量也是比较常见的，比如我们在运行测试时，需要加上 NODE_ENV=test，或者在启动静态资源服务器时自定义端口号。因为不同平台的环境变量语法不同，我们可以使用 cross-env 来实现 npm script 的跨平台兼容，具体步骤如下：</p><h3 id="第-1-步-添加-cross-env-到开发依赖" tabindex="-1"><a class="header-anchor" href="#第-1-步-添加-cross-env-到开发依赖" aria-hidden="true">#</a> 第 1 步，添加 cross-env 到开发依赖</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i cross<span class="token operator">-</span>env <span class="token operator">-</span><span class="token constant">D</span>
# npm install cross<span class="token operator">-</span>env <span class="token operator">--</span>save<span class="token operator">-</span>dev
# yarn add cross<span class="token operator">-</span>env <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第-2-步-改写使用了环境变量的-npm-script" tabindex="-1"><a class="header-anchor" href="#第-2-步-改写使用了环境变量的-npm-script" aria-hidden="true">#</a> 第 2 步，改写使用了环境变量的 npm script</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
-    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NODE_ENV=test mocha tests/&quot;</span><span class="token punctuation">,</span>
+    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=test mocha tests/&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于-npm-script-的跨平台兼容-还有几点需要大家注意" tabindex="-1"><a class="header-anchor" href="#关于-npm-script-的跨平台兼容-还有几点需要大家注意" aria-hidden="true">#</a> 关于 npm script 的跨平台兼容，还有几点需要大家注意</h2><ul><li>所有使用引号的地方，建议使用双引号，并且加上转义；</li><li>没做特殊处理的命令比如 eslint、stylelint、mocha、opn 等工具本身都是跨平台兼容的；</li><li>还是强烈建议有能力的同学能使用 Linux 做开发，只要你入门并且熟练了，效率提升会惊人；</li><li>短时间内继续拥抱 Windows 的同学，可以考虑看看 Windows 10 里面引入的 Subsystem，让你不用虚拟机即可在 Windows 下使用大多数 Linux 命令。</li></ul>`,28),t=[o];function r(c,i){return a(),n("div",null,t)}const u=s(p,[["render",r],["__file","index.html.vue"]]);export{u as default};
