import{_ as a,z as e,A as n,a6 as s}from"./framework.fef63301.js";const r={},p=s(`<h1 id="运行多个-npm-script-的各种姿势" tabindex="-1"><a class="header-anchor" href="#运行多个-npm-script-的各种姿势" aria-hidden="true">#</a> 运行多个 npm script 的各种姿势</h1><h2 id="让多个-npm-script-串行" tabindex="-1"><a class="header-anchor" href="#让多个-npm-script-串行" aria-hidden="true">#</a> 让多个 npm script 串行？&amp;&amp;</h2><p>在我们运行测试之前确保我们的代码都通过代码检查会是比较不错的实践，这也是让多个 npm script 串行的典型用例，实现方式也比较简单，只需要用 &amp;&amp; 符号把多条 npm script 按先后顺序串起来即可</p><h2 id="让多个-npm-script-并行" tabindex="-1"><a class="header-anchor" href="#让多个-npm-script-并行" aria-hidden="true">#</a> 让多个 npm script 并行？ &amp;</h2><p>在严格串行的情况下，我们必须要确保代码中没有编码规范问题才能运行测试，在某些时候可能并不是我们想要的，因为我们真正需要的是，代码变更时同时给出测试结果和测试运行结果。这就需要把子命令的运行从串行改成并行，实现方式更简单，把连接多条命令的 &amp;&amp; 符号替换成 &amp; 即可。</p><h2 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h2><p>npm 内置支持的多条命令并行跟 js 里面同时发起多个异步请求非常类似，它只负责触发多条命令，而不管结果的收集</p><p>加上 wait 的额外好处是，如果我们在任何子命令中启动了长时间运行的进程，比如启用了 mocha 的 --watch 配置，可以使用 ctrl + c 来结束进程，如果没加的话，你就没办法直接结束启动到后台的进程。</p><h2 id="有没有更好的管理方式-npm-run-all" tabindex="-1"><a class="header-anchor" href="#有没有更好的管理方式-npm-run-all" aria-hidden="true">#</a> 有没有更好的管理方式？ npm-run-all</h2><p>用如下命令将 npm-run-all 添加到项目依赖中：</p><h3 id="下载依赖" tabindex="-1"><a class="header-anchor" href="#下载依赖" aria-hidden="true">#</a> 下载依赖</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i npm<span class="token operator">-</span>run<span class="token operator">-</span>all <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm<span class="token operator">-</span>run<span class="token operator">-</span>all xxx1 xxx2 xxx3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>npm-run-all 还支持通配符匹配分组的 npm script，上面的脚本可以进一步简化成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm<span class="token operator">-</span>run<span class="token operator">-</span>all xxx<span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何让多个-npm-script-并行执行" tabindex="-1"><a class="header-anchor" href="#如何让多个-npm-script-并行执行" aria-hidden="true">#</a> 如何让多个 npm script 并行执行？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm<span class="token operator">-</span>run<span class="token operator">-</span>all <span class="token operator">--</span>parallel xxx<span class="token operator">:</span><span class="token operator">*</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),i=[p];function t(c,d){return e(),n("div",null,i)}const o=a(r,[["render",t],["__file","index.html.vue"]]);export{o as default};
