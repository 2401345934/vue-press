import{_ as n,z as s,A as a,a6 as p}from"./framework.fef63301.js";const e={},t=p(`<h1 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件" aria-hidden="true">#</a> 异步组件</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>defineAsyncComponent
<span class="token keyword">function</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span>
  source<span class="token operator">:</span> AsyncComponentLoader <span class="token operator">|</span> AsyncComponentOptions
<span class="token punctuation">)</span><span class="token operator">:</span> Component

<span class="token keyword">type</span> <span class="token class-name">AsyncComponentLoader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span>

<span class="token keyword">interface</span> <span class="token class-name">AsyncComponentOptions</span> <span class="token punctuation">{</span>
  loader<span class="token operator">:</span> AsyncComponentLoader
  loadingComponent<span class="token operator">?</span><span class="token operator">:</span> Component
  errorComponent<span class="token operator">?</span><span class="token operator">:</span> Component
  delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  suspensible<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    error<span class="token operator">:</span> Error<span class="token punctuation">,</span>
    <span class="token function-variable function">retry</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
    attempts<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用来定义 异步组件 允许传入一个工厂函数</li><li>接受返回的 promise 工厂函数 从服务端成功加载异步组件之后 应执行 resolove 回调函数 <ul><li>如果加载失败 执行 reject 回调函数</li></ul></li><li>defineAsyncComponent 函数只有单个参数 source 可以是工厂函数 也可以是一个对象</li><li>defineAsyncComponent 会将参数标准化成一个对象 并且把 loader 属性指向这个函数</li><li>defineAsyncComponent 主要做了三件事 渲染占位节点 加载异步 javascript 模块 以及 获取组件对象 以及重新渲染组件</li></ul><h2 id="渲染占位节点" tabindex="-1"><a class="header-anchor" href="#渲染占位节点" aria-hidden="true">#</a> 渲染占位节点</h2><ul><li>defineAsyncComponent 返回的是 defineComponent 函数执行的结果</li><li>defineComponent 函数做的也是标准化 如果传递的 options 是一个函数 那么返回一个对象 让 options 函数指向其 setup 属性</li><li>因此 defineAsyncComponent 函数的返回值就是一个带 setup 属性的对象 其实就是一个组件对象</li><li>由于 setup函数返回的是一个函数 这个函数就是该组件的渲染函数</li><li>普通的异步组件初次会被渲染成一个注释节点</li></ul><h2 id="加载异步-javascript-模块" tabindex="-1"><a class="header-anchor" href="#加载异步-javascript-模块" aria-hidden="true">#</a> 加载异步 javascript 模块</h2><ul><li>除了把异步组件渲染成注释节点 setup函数内部还调用了 load 函数来加载异步 js模块</li><li>load 函数内部主要是通过执行用户定义的 工厂函数 loader 来发送请求 <ul><li>会返回一个 promise 对象</li><li>加载成功 会在 then 函数 中获得组件的模块 comp 如果组件是通过 export defalut 导出的 可以通过 comp.default 获取它的真实组件对象 赋值给 resolveComp</li><li>如果组件对象 comp 不是函数类型 也不是对象类型 抛出错误</li></ul></li></ul><h2 id="重新渲染组件" tabindex="-1"><a class="header-anchor" href="#重新渲染组件" aria-hidden="true">#</a> 重新渲染组件</h2><ul><li>在调用 load 会修改响应式对象 loaded 来触发异步组件的重新渲染</li><li>当异步组件重新渲染后 会再次执行组件的 render 函数</li><li>最终是调用了 createInnerComp 函数创建一个 vnode 对象 就可以渲染了</li></ul><h2 id="高级用法" tabindex="-1"><a class="header-anchor" href="#高级用法" aria-hidden="true">#</a> 高级用法</h2><ul><li>defineAsyncComponent 可以接受一个对象 <ul><li>loader 工厂函数</li><li>loadingComponent : 加载异步组件时要使用的组件</li><li>errorComponent : 加载失败的时候要使用的组件</li><li>delay: 在显示 loadingComponent 之前的延迟 单位 ms</li><li>timeout： 超出时间 显示 error 组件</li><li>onError ： 函数 返回错误信息</li></ul></li></ul><h2 id="loading组件" tabindex="-1"><a class="header-anchor" href="#loading组件" aria-hidden="true">#</a> loading组件</h2><ul><li>defineAsyncComponent <ul><li>loadingComponent : 加载异步组件时要使用的组件</li></ul></li></ul><h2 id="error组件" tabindex="-1"><a class="header-anchor" href="#error组件" aria-hidden="true">#</a> error组件</h2><ul><li>defineAsyncComponent 可以接受一个对象 <ul><li>errorComponent : 加载失败的时候要使用的组件</li></ul></li></ul><h2 id="只加载一次" tabindex="-1"><a class="header-anchor" href="#只加载一次" aria-hidden="true">#</a> 只加载一次</h2><ul><li>defineAsyncComponent 内部会通过 一个变量 pendingRequest</li><li>即使初始化多次 变量还是共享的</li><li>第一次执行 load 函数 pendingRequest 还是 null 会执行 loader 函数加载异步组件 并把返回值赋给 pendingRequest</li><li>第二次执行的时候 发现 pendingRequest 有值 直接返回 上一次的结果 不会再次调用 loader 函数</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAsyncComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> Component <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ComponentPublicInstance <span class="token punctuation">}</span>
<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>source<span class="token operator">:</span> AsyncComponentLoader<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> AsyncComponentOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    source <span class="token operator">=</span> <span class="token punctuation">{</span> loader<span class="token operator">:</span> source <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    loader<span class="token punctuation">,</span>
    loadingComponent<span class="token punctuation">,</span>
    errorComponent<span class="token punctuation">,</span>
    delay <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
    timeout<span class="token punctuation">,</span> <span class="token comment">// undefined = never times out</span>
    suspensible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    onError<span class="token operator">:</span> userOnError
  <span class="token punctuation">}</span> <span class="token operator">=</span> source

  <span class="token keyword">let</span> pendingRequest<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ConcreteComponent<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">let</span> resolvedComp<span class="token operator">:</span> ConcreteComponent <span class="token operator">|</span> <span class="token keyword">undefined</span>

  <span class="token keyword">let</span> retries <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> <span class="token function-variable function">retry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    retries<span class="token operator">++</span>
    pendingRequest <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> load <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ConcreteComponent<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> thisRequest<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ConcreteComponent<span class="token operator">&gt;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      pendingRequest <span class="token operator">||</span>
      <span class="token punctuation">(</span>thisRequest <span class="token operator">=</span> pendingRequest <span class="token operator">=</span>
        <span class="token function">loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            err <span class="token operator">=</span> err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> err <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>userOnError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> <span class="token function-variable function">userRetry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">const</span> <span class="token function-variable function">userFail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                <span class="token function">userOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> userRetry<span class="token punctuation">,</span> userFail<span class="token punctuation">,</span> retries <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token keyword">throw</span> err
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>comp<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>thisRequest <span class="token operator">!==</span> pendingRequest <span class="token operator">&amp;&amp;</span> pendingRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> pendingRequest
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>comp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">warn</span><span class="token punctuation">(</span>
                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Async component loader resolved to undefined. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
                  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">If you are using retry(), make sure to return its return value.</span><span class="token template-punctuation string">\`</span></span>
              <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// interop module default</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>
              comp <span class="token operator">&amp;&amp;</span>
              <span class="token punctuation">(</span>comp<span class="token punctuation">.</span>__esModule <span class="token operator">||</span> comp<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Module&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span> <span class="token punctuation">{</span>
              comp <span class="token operator">=</span> comp<span class="token punctuation">.</span>default
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> comp <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid async component load result: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>comp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            resolvedComp <span class="token operator">=</span> comp
            <span class="token keyword">return</span> comp
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;AsyncComponentWrapper&#39;</span><span class="token punctuation">,</span>

    __asyncLoader<span class="token operator">:</span> load<span class="token punctuation">,</span>

    <span class="token keyword">get</span> <span class="token function">__asyncResolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> resolvedComp
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> instance <span class="token operator">=</span> currentInstance<span class="token operator">!</span>

      <span class="token comment">// already resolved</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedComp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createInnerComp</span><span class="token punctuation">(</span>resolvedComp<span class="token operator">!</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> <span class="token function-variable function">onError</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        pendingRequest <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token function">handleError</span><span class="token punctuation">(</span>
          err<span class="token punctuation">,</span>
          instance<span class="token punctuation">,</span>
          ErrorCodes<span class="token punctuation">.</span><span class="token constant">ASYNC_COMPONENT_LOADER</span><span class="token punctuation">,</span>
          <span class="token operator">!</span>errorComponent <span class="token comment">/* do not throw in dev if user provided error component */</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// suspense-controlled or SSR.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token punctuation">(</span>__FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> suspensible <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>suspense<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>__SSR__ <span class="token operator">&amp;&amp;</span> isInSSRComponentSetup<span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>comp <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createInnerComp</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
              errorComponent
                <span class="token operator">?</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>errorComponent <span class="token keyword">as</span> ConcreteComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    error<span class="token operator">:</span> err
                  <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token operator">:</span> <span class="token keyword">null</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> loaded <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> delayed <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>delay<span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          delayed<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loaded<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Async component timed out after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timeout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.</span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span>
            <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            error<span class="token punctuation">.</span>value <span class="token operator">=</span> err
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          loaded<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> <span class="token function">isKeepAlive</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// parent is keep-alive, force update so the loaded component&#39;s</span>
            <span class="token comment">// name is taken into account</span>
            <span class="token function">queueJob</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>update<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
          error<span class="token punctuation">.</span>value <span class="token operator">=</span> err
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loaded<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> resolvedComp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">createInnerComp</span><span class="token punctuation">(</span>resolvedComp<span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> errorComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>errorComponent <span class="token keyword">as</span> ConcreteComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            error<span class="token operator">:</span> error<span class="token punctuation">.</span>value
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>loadingComponent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>delayed<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>loadingComponent <span class="token keyword">as</span> ConcreteComponent<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>异步组件本质就是一个普通的组件</li><li>在内部通过定义的 loader 加载器在首次渲染的时候发起一个加载异步组件的模块请求 同时被宣传成注释节点或者 loading 组件 <ul><li>当异步组件加载成功之后 会通过修改响应式数据的值来触发组件的重新渲染 渲染真正的组件</li><li>当异步组件加载失败之后 可以执行用户自定义的失败处理函数来决定是重试还是直接失败</li></ul></li><li>如果多次重试失败或者直接失败 则会在用户配置的 errorComponent 条件下渲染 error组件</li><li>异步组件通过闭包的技巧确保了 多个异步组件同时加载 只发送一次请求 <ul><li>如果已经被加载的异步组件被再次初始化 直接获取对应的组件返回并渲染</li></ul></li></ul>`,20),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","index.html.vue"]]);export{r as default};
