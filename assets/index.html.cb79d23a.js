import{_ as a,z as n,A as e,a6 as t}from"./framework.fef63301.js";const s={},c=t(`<h1 id="watcheffect-api" tabindex="-1"><a class="header-anchor" href="#watcheffect-api" aria-hidden="true">#</a> watchEffect API</h1><h2 id="watcheffect" tabindex="-1"><a class="header-anchor" href="#watcheffect" aria-hidden="true">#</a> watchEffect</h2><ul><li>作用是注册 一个副作用函数 副作用函数内部可以访问响应式对象</li><li>当响应式对象变化 立即执行这个函数</li></ul><h2 id="watcheffect-和-watch-的不同" tabindex="-1"><a class="header-anchor" href="#watcheffect-和-watch-的不同" aria-hidden="true">#</a> watchEffect 和 watch 的不同</h2><ul><li>监听的源不同 <ul><li>watch 可以监听一个或者多个响应式对象 还可以监听一个 getter 函数</li><li>watchEffect 监听的是一个普通函数 只要内部访问了 响应式对象即可 这个函数不需要返回响应式对象</li></ul></li><li>没有回调函数 <ul><li>watchEffect 没有回调函数 在副作用函数内部 响应式对象发生变化 会再次执行这个副作用函数</li></ul></li><li>立即执行 <ul><li>watchEffect 在创建好 watcher 后 立即执行他的副作用函数</li><li>watch 需要配置 immediate 为 true 才会立即执行</li></ul></li><li>内部也是通过 doWatch 函数实现的</li><li>getter 函数就是对 source 函数 简单封装 会先判断组件的实例是否已经注销 然后每次执行 source 函数前执行 cleanup 清理函数</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Simple effect.</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span>
  effect<span class="token operator">:</span> WatchEffect<span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> WatchOptionsBase
<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注册无效回调函数-oninvalidate" tabindex="-1"><a class="header-anchor" href="#注册无效回调函数-oninvalidate" aria-hidden="true">#</a> 注册无效回调函数 onInvalidate</h2><ul><li>可以利用 watchEffect 注册一个副作用函数 有一个 onInvalidate 参数</li><li>函数内部通过 preformAsyncOperation 执行某些异步操作 并且访问了 id 这个响应式对象</li><li>然后通过 onInvalidate 注册一个回调函数</li><li>检测 响应式数据发生变化的时候 会触发 getter 函数 执行 cleanup 函数</li><li>当 watcher 被销毁的时候 执行 onStop 函数 两者都会执行注册的无效回调函数 fn</li></ul>`,8),i=[c];function l(o,p){return n(),e("div",null,i)}const d=a(s,[["render",l],["__file","index.html.vue"]]);export{d as default};
