import{_ as a,z as e,A as s,a6 as n}from"./framework.fef63301.js";const r={},i=n(`<h1 id="html优化" tabindex="-1"><a class="header-anchor" href="#html优化" aria-hidden="true">#</a> HTML优化</h1><h2 id="dns-预解析" tabindex="-1"><a class="header-anchor" href="#dns-预解析" aria-hidden="true">#</a> DNS 预解析</h2><p>DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;dns-prefetch&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;//yuchengkai.cn&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="图片加载优化" tabindex="-1"><a class="header-anchor" href="#图片加载优化" aria-hidden="true">#</a> 图片加载优化</h2><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p><ul><li>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</li><li>照片使用 JPEG</li><li>将多个图标文件整合到一张图片中（雪碧图）</li></ul><h2 id="预加载" tabindex="-1"><a class="header-anchor" href="#预加载" aria-hidden="true">#</a> 预加载</h2><ul><li>元素的 rel 属性的属性值preload能够让你在你的HTML页面中 元素内部书写一些声明式的资源获取请求，可以指明哪些资源是在页面加载完成后即刻需要的。</li><li>对于这种即刻需要的资源，你可能希望在页面加载的生命周期的早期阶段就开始获取，在浏览器的主渲染机制介入前就进行预加载。</li><li>这一机制使得资源可以更早的得到加载并可用，且更不易阻塞页面的初步渲染，进而提升性能</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;preload&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;http://example.com&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="预渲染" tabindex="-1"><a class="header-anchor" href="#预渲染" aria-hidden="true">#</a> 预渲染</h2><p>可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;prerender&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;http://example.com&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>预渲染虽然可以提高页面的加载速度，但是要确保该页面大概率会被用户在之后打开，否则就是白白浪费资源去渲染。</p><h2 id="懒执行" tabindex="-1"><a class="header-anchor" href="#懒执行" aria-hidden="true">#</a> 懒执行</h2><ul><li>懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。</li><li>懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。</li></ul><h2 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载" aria-hidden="true">#</a> 懒加载</h2><ul><li>懒加载就是将不关键的资源延后加载。</li><li>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。</li><li>对于图片来说，先设置图片标签的 src 属性为一张占位图，将真实的图片资源放入一个自定义属性中，</li><li>当进入自定义区域时，就将自定义属性替换为 src 属性，这样图片就会去下载资源，实现了图片懒加载。</li></ul><h2 id="cdn" tabindex="-1"><a class="header-anchor" href="#cdn" aria-hidden="true">#</a> CDN</h2><p>我们可以将静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。</p>`,20),t=[i];function l(d,o){return e(),s("div",null,t)}const p=a(r,[["render",l],["__file","index.html.vue"]]);export{p as default};
