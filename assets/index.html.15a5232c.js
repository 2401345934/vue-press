import{_ as n,z as s,A as a,a6 as p}from"./framework.fef63301.js";const t={},o=p(`<h1 id="浏览器代码片段" tabindex="-1"><a class="header-anchor" href="#浏览器代码片段" aria-hidden="true">#</a> 浏览器代码片段</h1><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><ul><li>打开开发者工具</li><li>command + p 打开搜索</li><li>! + 代码片段的名字 选择某个代码片段</li></ul><h2 id="添加代码片段" tabindex="-1"><a class="header-anchor" href="#添加代码片段" aria-hidden="true">#</a> 添加代码片段</h2><ul><li>打开开发者工具</li><li>选择 source 选项卡 或者 源代码选项卡</li><li>选择 Snippets 或者代码段</li><li>新建代码段 取个名字</li></ul><h2 id="分享我自己常用的代码片段" tabindex="-1"><a class="header-anchor" href="#分享我自己常用的代码片段" aria-hidden="true">#</a> 分享我自己常用的代码片段</h2><h3 id="colors" tabindex="-1"><a class="header-anchor" href="#colors" aria-hidden="true">#</a> colors</h3><p>获取页面所有的颜色</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// allcolors.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Print out CSS colors used in elements on the page.</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Should include colors from elements that have a border color but have a zero width?</span>
  <span class="token keyword">var</span> includeBorderColorsWithZeroWidth <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> allColors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> props <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;background-color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;border-top-color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;border-right-color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;border-bottom-color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;border-left-color&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> skipColors <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;rgb(0, 0, 0)&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;rgba(0, 0, 0, 0)&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;rgb(255, 255, 255)&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> nodeColors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> color <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">,</span>
        thisIsABorderProperty <span class="token operator">=</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;border&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        notBorderZero <span class="token operator">=</span> thisIsABorderProperty <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;width&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&quot;0px&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        colorConditionsMet<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>includeBorderColorsWithZeroWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        colorConditionsMet <span class="token operator">=</span> color <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>skipColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        colorConditionsMet <span class="token operator">=</span> color <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>skipColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> notBorderZero<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>colorConditionsMet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          allColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token literal-property property">nodes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          allColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
          allColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        nodeColors<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">rgbTextToRgbArray</span><span class="token punctuation">(</span><span class="token parameter">rgbText</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> rgbText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+,\\d+,\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">componentToHex</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> hex <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hex<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> hex <span class="token operator">:</span> hex<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">rgbToHex</span><span class="token punctuation">(</span><span class="token parameter">rgbArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> r <span class="token operator">=</span> rgbArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      g <span class="token operator">=</span> rgbArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      b <span class="token operator">=</span> rgbArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> <span class="token function">componentToHex</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">componentToHex</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">componentToHex</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> allColorsSorted <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> allColors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> rgbArray <span class="token operator">=</span> <span class="token function">rgbTextToRgbArray</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> hexValue <span class="token operator">=</span> <span class="token function">rgbToHex</span><span class="token punctuation">(</span>rgbArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

    allColorsSorted<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">key</span><span class="token operator">:</span> i<span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> allColors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">hexValue</span><span class="token operator">:</span> hexValue
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  allColorsSorted <span class="token operator">=</span> allColorsSorted<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count <span class="token operator">-</span> a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> nameStyle <span class="token operator">=</span> <span class="token string">&quot;font-weight:normal;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> countStyle <span class="token operator">=</span> <span class="token string">&quot;font-weight:bold;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">colorStyle</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;background:&quot;</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">&quot;;color:&quot;</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">&quot;;border:1px solid #333;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;Total colors used in elements on the page: &quot;</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">+</span> <span class="token string">&quot; are &quot;</span> <span class="token operator">+</span> allColorsSorted<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  allColorsSorted<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">groupCollapsed</span><span class="token punctuation">(</span><span class="token string">&quot;%c    %c &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>hexValue <span class="token operator">+</span> <span class="token string">&quot; %c(&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">&quot; times)&quot;</span><span class="token punctuation">,</span>
      <span class="token function">colorStyle</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> nameStyle<span class="token punctuation">,</span> countStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>value<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token string">&quot;All colors used in elements on the page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> cookies</h3><p>获取页面所有的 cookies</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// viewcookies.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Shows all cookies stored in document.cookies in a console.table</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

  window<span class="token punctuation">.</span><span class="token function-variable function">viewCookies</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> cookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie
        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">; ?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> key<span class="token punctuation">,</span> value <span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(.*?)=(.*)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            key<span class="token punctuation">,</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;document.cookie is empty!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span><span class="token function">viewCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cssprettifier" tabindex="-1"><a class="header-anchor" href="#cssprettifier" aria-hidden="true">#</a> cssprettifier</h3><p>css 格式化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cssprettifier.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Unminify and prettify a CSS file.</span>

<span class="token comment">/*
 * cssprettifier-bookmarklet
 * Copyright (c) 2013 Addy Osmani, Sindre Sorhus
 * CSSBeautify (c) Sencha, Ariya Hidayat
 * Prism (c) Lea Verou
 * Licensed under the MIT license.
 */</span>
 <span class="token comment">/*globals document:true*/</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;CSS Prettify: This page doesn&#39;t appear to be a stylesheet.  Make sure you run this on a css file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// cssbeautify</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot; &quot;</span><span class="token operator">===</span>a<span class="token operator">||</span><span class="token string">&quot;\\n&quot;</span><span class="token operator">===</span>a<span class="token operator">||</span><span class="token string">&quot;   &quot;</span><span class="token operator">===</span>a<span class="token operator">||</span><span class="token string">&quot;\\r&quot;</span><span class="token operator">===</span>a<span class="token operator">||</span><span class="token string">&quot;\\f&quot;</span><span class="token operator">===</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;&#39;&quot;</span><span class="token operator">===</span>a<span class="token operator">||</span><span class="token string">&#39;&quot;&#39;</span><span class="token operator">===</span>a<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">u</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> h<span class="token operator">&gt;=</span><span class="token string">&quot;a&quot;</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;z&quot;</span><span class="token operator">&gt;=</span>h<span class="token operator">||</span>h<span class="token operator">&gt;=</span><span class="token string">&quot;A&quot;</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;Z&quot;</span><span class="token operator">&gt;=</span>h<span class="token operator">||</span>h<span class="token operator">&gt;=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;9&quot;</span><span class="token operator">&gt;=</span>h<span class="token operator">||</span><span class="token string">&quot;-_*.:#&quot;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>a<span class="token operator">=</span>m<span class="token punctuation">;</span>a<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">)</span>g<span class="token operator">+=</span>c<span class="token punctuation">.</span>indent<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">?</span>g<span class="token operator">+=</span><span class="token string">&quot; {&quot;</span><span class="token operator">:</span><span class="token punctuation">(</span>g<span class="token operator">+=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;\\n&quot;</span><span class="token operator">!==</span>i<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>g<span class="token operator">+=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>m<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">,</span>g<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;;&quot;</span><span class="token operator">!==</span>a<span class="token operator">&amp;&amp;</span><span class="token string">&quot;{&quot;</span><span class="token operator">!==</span>a<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>g<span class="token operator">+=</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token punctuation">,</span>f<span class="token punctuation">,</span>h<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span>g<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>c<span class="token operator">=</span>arguments<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">?</span>b<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>indent<span class="token operator">===</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>indent<span class="token operator">=</span><span class="token string">&quot;    &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;string&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> c<span class="token punctuation">.</span>openbrace<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token string">&quot;end-of-line&quot;</span><span class="token operator">===</span>c<span class="token punctuation">.</span>openbrace<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;boolean&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> c<span class="token punctuation">.</span>autosemicolon<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>q<span class="token operator">=</span>c<span class="token punctuation">.</span>autosemicolon<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trimRight<span class="token operator">?</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">Start</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">AtRule</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">Block</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">Selector</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">Ruleset</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token literal-property property">Property</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">Separator</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token literal-property property">Expression</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token constant">URL</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token operator">&gt;</span>d<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">t</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>h<span class="token operator">===</span>n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;\\\\&quot;</span><span class="token operator">===</span>h<span class="token operator">&amp;&amp;</span>i<span class="token operator">===</span>n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>g<span class="token operator">+=</span>i<span class="token punctuation">,</span>d<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">t</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>n<span class="token operator">=</span>h<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token operator">===</span>h<span class="token operator">&amp;&amp;</span><span class="token string">&quot;/&quot;</span><span class="token operator">===</span>i<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>g<span class="token operator">+=</span>i<span class="token punctuation">,</span>d<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token operator">!==</span>h<span class="token operator">||</span><span class="token string">&quot;*&quot;</span><span class="token operator">!==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">===</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">===</span>f<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token function">s</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">===</span>g<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token operator">&gt;=</span>h<span class="token operator">||</span>h<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>g<span class="token operator">+=</span>h<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">u</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&quot;[&quot;</span><span class="token operator">===</span>h<span class="token operator">||</span><span class="token string">&quot;@&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">===</span>j<span class="token punctuation">.</span>length<span class="token punctuation">)</span>f<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>g<span class="token operator">=</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token operator">===</span>j<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&quot;;&quot;</span><span class="token operator">===</span>j<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>g<span class="token operator">=</span>j<span class="token operator">+</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token operator">!==</span>i<span class="token operator">&amp;&amp;</span><span class="token number">9</span><span class="token operator">!==</span>i<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>g<span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token string">&quot;@&quot;</span><span class="token operator">===</span>h<span class="token operator">?</span>l<span class="token punctuation">.</span>AtRule<span class="token operator">:</span>l<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span>l<span class="token punctuation">.</span>AtRule<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span>l<span class="token punctuation">.</span>Block<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span>l<span class="token punctuation">.</span>Selector<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span>l<span class="token punctuation">.</span>Ruleset<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span>l<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span>l<span class="token punctuation">.</span>Separator<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span>l<span class="token punctuation">.</span>Expression<span class="token punctuation">)</span>k<span class="token operator">===</span>l<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;)&quot;</span><span class="token operator">===</span>h<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token operator">!==</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Expression<span class="token punctuation">)</span><span class="token operator">:</span>g<span class="token operator">+=</span>h<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>m<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Block<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>g<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span><span class="token string">&quot;;\\n&quot;</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Ruleset<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span><span class="token string">&quot;(&quot;</span><span class="token operator">===</span>h<span class="token operator">&amp;&amp;</span><span class="token string">&quot;l&quot;</span><span class="token operator">===</span>g<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;r&quot;</span><span class="token operator">===</span>g<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;u&quot;</span><span class="token operator">===</span>g<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">s</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Expression<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token function">t</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Expression<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>g<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span><span class="token string">&quot;: &quot;</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Expression<span class="token punctuation">,</span><span class="token function">s</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Separator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>m<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Block<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span>g<span class="token operator">+=</span>h<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>m<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Block<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>g<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">s</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Property<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span>g<span class="token operator">+=</span>h<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Ruleset<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span>g<span class="token operator">+=</span>h<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">u</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">===</span>j<span class="token punctuation">.</span>length<span class="token punctuation">)</span>f<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>g<span class="token operator">=</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token operator">===</span>j<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>g<span class="token operator">=</span>j<span class="token operator">+</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token operator">!==</span>i<span class="token operator">&amp;&amp;</span><span class="token number">9</span><span class="token operator">!==</span>i<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>g<span class="token operator">=</span>g<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>g<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span>g<span class="token operator">+=</span>h<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>k<span class="token operator">=</span>l<span class="token punctuation">.</span>Start<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token operator">===</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>j<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token string">&quot;@font-face&quot;</span><span class="token operator">===</span>j<span class="token operator">?</span>l<span class="token punctuation">.</span>Ruleset<span class="token operator">:</span>l<span class="token punctuation">.</span>Block<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">}</span>g<span class="token operator">+=</span>h<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> o<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>g<span class="token operator">+=</span>h<span class="token punctuation">,</span>g<span class="token operator">+=</span>i<span class="token punctuation">,</span>d<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> g<span class="token operator">=</span>f<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span>g<span class="token punctuation">}</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> exports<span class="token operator">?</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span>exports<span class="token operator">=</span>a<span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> window<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>cssbeautify<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// prism</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\blang(?:uage)?-(?!\\*)(\\w+)\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>t<span class="token operator">=</span>self<span class="token punctuation">.</span>Prism<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">util</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">type</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[object (\\w+)\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">clone</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span>t<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span><span class="token string">&quot;Object&quot;</span><span class="token operator">:</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> e<span class="token punctuation">)</span>e<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">&quot;Array&quot;</span><span class="token operator">:</span><span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">languages</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">extend</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> n<span class="token punctuation">)</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">insertBefore</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">=</span>i<span class="token operator">||</span>t<span class="token punctuation">.</span>languages<span class="token punctuation">;</span><span class="token keyword">var</span> s<span class="token operator">=</span>i<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> u <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token keyword">in</span> r<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span>o<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">DFS</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token keyword">in</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">n</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">&quot;Object&quot;</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token constant">DFS</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">highlightAll</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;code[class*=&quot;language-&quot;], [class*=&quot;language-&quot;] code, code[class*=&quot;lang-&quot;], [class*=&quot;lang-&quot;] code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">;</span>s<span class="token operator">=</span>r<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">highlightElement</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>e<span class="token operator">===</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">highlightElement</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>i<span class="token punctuation">,</span>s</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token punctuation">,</span>u<span class="token punctuation">,</span>a<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>o<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>u<span class="token operator">=</span>t<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>className<span class="token operator">=</span>r<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; language-&quot;</span><span class="token operator">+</span>o<span class="token punctuation">;</span>a<span class="token operator">=</span>r<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">pre</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>className<span class="token operator">=</span>a<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; language-&quot;</span><span class="token operator">+</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> f<span class="token operator">=</span>r<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>f<span class="token operator">=</span>f<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\u00a0</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> l<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">element</span><span class="token operator">:</span>r<span class="token punctuation">,</span><span class="token literal-property property">language</span><span class="token operator">:</span>o<span class="token punctuation">,</span><span class="token literal-property property">grammar</span><span class="token operator">:</span>u<span class="token punctuation">,</span><span class="token literal-property property">code</span><span class="token operator">:</span>f<span class="token punctuation">}</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;before-highlight&quot;</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;&amp;</span>self<span class="token punctuation">.</span>Worker<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>l<span class="token punctuation">.</span>highlightedCode<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span>element<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>l<span class="token punctuation">.</span>highlightedCode<span class="token punctuation">;</span>s<span class="token operator">&amp;&amp;</span><span class="token function">s</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;after-highlight&quot;</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">language</span><span class="token operator">:</span>l<span class="token punctuation">.</span>language<span class="token punctuation">,</span><span class="token literal-property property">code</span><span class="token operator">:</span>l<span class="token punctuation">.</span>code<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>l<span class="token punctuation">.</span>highlightedCode<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>code<span class="token punctuation">,</span>l<span class="token punctuation">.</span>grammar<span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span>element<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>l<span class="token punctuation">.</span>highlightedCode<span class="token punctuation">;</span>s<span class="token operator">&amp;&amp;</span><span class="token function">s</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;after-highlight&quot;</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">highlight</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">tokenize</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>Token<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span>n<span class="token punctuation">.</span>rest<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o <span class="token keyword">in</span> s<span class="token punctuation">)</span>n<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> n<span class="token punctuation">.</span>rest<span class="token punctuation">}</span>e<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o <span class="token keyword">in</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span>n<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">var</span> u<span class="token operator">=</span>n<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">=</span>u<span class="token punctuation">.</span>inside<span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token operator">!</span><span class="token operator">!</span>u<span class="token punctuation">.</span>lookbehind<span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">;</span>u<span class="token operator">=</span>u<span class="token punctuation">.</span>pattern<span class="token operator">||</span>u<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>i<span class="token punctuation">.</span>length<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span>i<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>length<span class="token operator">&gt;</span>e<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">break</span> e<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">r</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>lastIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> h<span class="token operator">=</span>u<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>f<span class="token operator">=</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p<span class="token operator">=</span>h<span class="token punctuation">.</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>f<span class="token punctuation">,</span>h<span class="token operator">=</span>h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">=</span>h<span class="token punctuation">.</span>length<span class="token punctuation">,</span>v<span class="token operator">=</span>p<span class="token operator">+</span>d<span class="token punctuation">,</span>m<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>m<span class="token operator">&amp;&amp;</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">r</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>a<span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token operator">:</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token operator">&amp;&amp;</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">hooks</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">all</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>all<span class="token punctuation">;</span>r<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">run</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>all<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token operator">||</span><span class="token operator">!</span>r<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">;</span>s<span class="token operator">=</span>r<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token function">s</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function-variable function">Token</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token operator">=</span>t<span class="token punctuation">}</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span><span class="token function-variable function">stringify</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> e<span class="token operator">==</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&quot;[object Array]&quot;</span><span class="token punctuation">)</span><span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>stringify<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span>e<span class="token punctuation">.</span>type<span class="token punctuation">,</span><span class="token literal-property property">content</span><span class="token operator">:</span>n<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">classes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">attributes</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token string">&quot;comment&quot;</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>spellcheck<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;wrap&quot;</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> s <span class="token keyword">in</span> r<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span>i<span class="token operator">+=</span>s<span class="token operator">+</span><span class="token string">&#39;=&quot;&#39;</span><span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">||</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token string">&quot;&lt;&quot;</span><span class="token operator">+</span>r<span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">&#39; class=&quot;&#39;</span><span class="token operator">+</span>r<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;&quot; &#39;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;&gt;&quot;</span><span class="token operator">+</span>r<span class="token punctuation">.</span>content<span class="token operator">+</span><span class="token string">&quot;&lt;/&quot;</span><span class="token operator">+</span>r<span class="token punctuation">.</span>tag<span class="token operator">+</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>document<span class="token punctuation">)</span><span class="token punctuation">{</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">.</span>language<span class="token punctuation">,</span>i<span class="token operator">=</span>n<span class="token punctuation">.</span>code<span class="token punctuation">;</span>self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>t<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">var</span> r<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token operator">=</span>r<span class="token punctuation">[</span>r<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span>filename<span class="token operator">=</span>r<span class="token punctuation">.</span>src<span class="token punctuation">;</span>document<span class="token punctuation">.</span>addEventListener<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-manual&quot;</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>highlightAll<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  Prism<span class="token punctuation">.</span>languages<span class="token punctuation">.</span>css<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">comment</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/\\*[\\w\\W]*?\\*\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token literal-property property">atrule</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@[\\w-]+?(\\s+[^;{]+)?(?=\\s*{|\\s*;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">url\\(([&quot;&#39;]?).*?\\1\\)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token literal-property property">selector</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\{\\}\\s][^\\{\\}]*(?=\\s*\\{)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token literal-property property">property</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\b|\\B)[a-z-]+(?=\\s*:)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token literal-property property">string</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&quot;|&#39;)(\\\\?.)*?\\1</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token literal-property property">important</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B!important\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token literal-property property">ignore</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;(lt|gt|amp);</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token literal-property property">punctuation</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\{\\};:]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>Prism<span class="token punctuation">.</span>languages<span class="token punctuation">.</span>markup<span class="token operator">&amp;&amp;</span>Prism<span class="token punctuation">.</span>languages<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">&quot;markup&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;tag&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">style</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">pattern</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&amp;lt;|&lt;)style[\\w\\W]*?(&gt;|&amp;gt;)[\\w\\W]*?(&amp;lt;|&lt;)\\/style(&gt;|&amp;gt;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token literal-property property">inside</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">pattern</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&amp;lt;|&lt;)style[\\w\\W]*?(&gt;|&amp;gt;)|(&amp;lt;|&lt;)\\/style(&gt;|&amp;gt;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token literal-property property">inside</span><span class="token operator">:</span>Prism<span class="token punctuation">.</span>languages<span class="token punctuation">.</span>markup<span class="token punctuation">.</span>tag<span class="token punctuation">.</span>inside<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">rest</span><span class="token operator">:</span>Prism<span class="token punctuation">.</span>languages<span class="token punctuation">.</span>css<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> prismStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> beautified <span class="token operator">=</span> <span class="token function">cssbeautify</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">autosemicolon</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> highlighted <span class="token operator">=</span> Prism<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>beautified<span class="token punctuation">,</span> Prism<span class="token punctuation">.</span>languages<span class="token punctuation">.</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span>

  prismStyle<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;code[class*=&quot;language-&quot;],pre[class*=&quot;language-&quot;]{color:black;text-shadow:0 1px white;font-family:Consolas,Monaco,\\&#39;Andale Mono\\&#39;,monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;}@media print{code[class*=&quot;language-&quot;],pre[class*=&quot;language-&quot;]{text-shadow:none;}}pre[class*=&quot;language-&quot;]{padding:1em;margin:.5em 0;overflow:auto;}:not(pre) &gt; code[class*=&quot;language-&quot;],pre[class*=&quot;language-&quot;]{background:#f5f2f0;}:not(pre) &gt; code[class*=&quot;language-&quot;]{padding:.1em;border-radius:.3em;}.token.comment,.token.prolog,.token.doctype,.token.cdata{color:slategray;}.token.punctuation{color:#999;}.namespace{opacity:.7;}.token.property,.token.tag,.token.boolean,.token.number{color:#905;}.token.selector,.token.attr-name,.token.string{color:#690;}.token.operator,.token.entity,.token.url,.language-css .token.string,.style .token.string{color:#a67f59;background:hsla(0,0%,100%,.5);}.token.atrule,.token.attr-value,.token.keyword{color:#07a;}.token.regex,.token.important{color:#e90;}.token.important{font-weight:bold;}.token.entity{cursor:help;}&#39;</span><span class="token punctuation">;</span>

  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>prismStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;code&gt;&lt;pre&gt;&#39;</span> <span class="token operator">+</span> highlighted <span class="token operator">+</span> <span class="token string">&#39;&lt;/pre&gt;&lt;/code&gt;&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cssreload" tabindex="-1"><a class="header-anchor" href="#cssreload" aria-hidden="true">#</a> cssreload</h3><p>页面 css 颜色重新随机加载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cssreload.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Removes then reloads all the CSS files in the current page</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">function</span> <span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token parameter">newElement<span class="token punctuation">,</span> targetElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> parent <span class="token operator">=</span> targetElement<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>lastChild <span class="token operator">==</span> targetElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElement<span class="token punctuation">,</span> targetElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">reloadStyleSheet</span><span class="token punctuation">(</span><span class="token parameter">stylesheet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> element <span class="token operator">=</span> stylesheet<span class="token punctuation">.</span>ownerNode<span class="token punctuation">;</span>
    <span class="token keyword">var</span> clone <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    clone<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token function">addRandomToUrl</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
    clone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insertAfter</span><span class="token punctuation">(</span>clone<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">addRandomToUrl</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// prevent CSS caching</span>
    <span class="token keyword">var</span> hasRnd <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([?&amp;])_=[^&amp;]*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      hasQueryString <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      hasHash <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.+)#(.+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      hash <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      rnd <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> hashMatches <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>hasHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      input <span class="token operator">=</span> hashMatches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      hash <span class="token operator">=</span> hashMatches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    url <span class="token operator">=</span> hasRnd<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">?</span>
    input<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>hasRnd<span class="token punctuation">,</span> <span class="token string">&quot;$1_=&quot;</span> <span class="token operator">+</span> rnd<span class="token punctuation">)</span> <span class="token operator">:</span>
    input <span class="token operator">+</span> <span class="token punctuation">(</span>hasQueryString<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;&amp;&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_=&quot;</span> <span class="token operator">+</span> rnd<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> url <span class="token operator">+=</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">return</span> url<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">styleSheet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>styleSheet<span class="token punctuation">.</span>href<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reload &#39;</span> <span class="token operator">+</span> styleSheet<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reloadStyleSheet</span><span class="token punctuation">(</span>styleSheet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="formcontrols" tabindex="-1"><a class="header-anchor" href="#formcontrols" aria-hidden="true">#</a> formcontrols</h3><p>页面所有的 from 表单和表格打印</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// formcontrols.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Print out forms and their controls</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">var</span> forms <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> forms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tab <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;HTMLForm \\&quot;&quot;</span> <span class="token operator">+</span> forms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;\\&quot;: &quot;</span> <span class="token operator">+</span> forms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Element:&quot;</span><span class="token punctuation">,</span> forms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;\\nName:    &quot;</span><span class="token operator">+</span>forms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;\\nMethod:  &quot;</span><span class="token operator">+</span>forms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\nAction:  &quot;</span><span class="token operator">+</span>forms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>action <span class="token operator">||</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;textarea&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;select&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">control</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>forms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>control<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tab<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token string-property property">&quot;Element&quot;</span><span class="token operator">:</span> node<span class="token punctuation">,</span>
          <span class="token string-property property">&quot;Type&quot;</span><span class="token operator">:</span> node<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
          <span class="token string-property property">&quot;Name&quot;</span><span class="token operator">:</span> node<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
          <span class="token string-property property">&quot;Value&quot;</span><span class="token operator">:</span> node<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
          <span class="token string-property property">&quot;Pretty Value&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&quot;&quot;</span> <span class="token operator">?</span> node<span class="token punctuation">.</span>value <span class="token operator">:</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jq" tabindex="-1"><a class="header-anchor" href="#jq" aria-hidden="true">#</a> jq</h3><p>给当前环境添加 jq</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// jquerify.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Add jQuery to any page that does not have it already.</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>window<span class="token punctuation">.</span>jQuery <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> dollarInUse <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>window<span class="token punctuation">.</span>$<span class="token punctuation">;</span>
    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;//ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;jQuery loaded!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span>dollarInUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jQuery<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\`$\` already in use; use \`jQuery\`&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="log" tabindex="-1"><a class="header-anchor" href="#log" aria-hidden="true">#</a> log</h3><p>增加 log 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// log.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Adds a \`log\` function to window object.</span>
<span class="token comment">// http://www.briangrinstead.com/blog/console-log-helper-function</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  window<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> console<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> performance</h3><p>打印当前页面的 performance</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// performance.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Print out window.performance information.</span>
<span class="token comment">// https://developer.mozilla.org/en-US/docs/Navigation_timing</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">var</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span>
  <span class="token keyword">var</span> lt <span class="token operator">=</span> window<span class="token punctuation">.</span>chrome <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>loadTimes <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span><span class="token function">loadTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> timings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Time Until Page Loaded&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Time Until DOMContentLoaded&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>domContentLoadedEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Total Response Time&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>requestStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Connection&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>connectEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>connectStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Response&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>responseStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Domain Lookup&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>domainLookupEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>domainLookupStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Load Event&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>loadEventStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Unload Event&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>unloadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>unloadEventStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;DOMContentLoaded Event&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> t<span class="token punctuation">.</span>domContentLoadedEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>domContentLoadedEventStart <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>lt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>wasNpnNegotiated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;NPN negotiation protocol&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">time</span><span class="token operator">:</span> lt<span class="token punctuation">.</span>npnNegotiatedProtocol
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;Connection Info&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">time</span><span class="token operator">:</span> lt<span class="token punctuation">.</span>connectionInfo
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    timings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;First paint after Document load&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">time</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>firstPaintTime <span class="token operator">-</span> lt<span class="token punctuation">.</span>finishDocumentLoadTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> navigation <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>navigation<span class="token punctuation">;</span>
  <span class="token keyword">var</span> navigationTypes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  navigationTypes<span class="token punctuation">[</span>navigation<span class="token punctuation">.</span><span class="token constant">TYPE_NAVIGATENEXT</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Navigation started by clicking on a link, or entering the URL in the user agent&#39;s address bar, or form submission.&quot;</span><span class="token punctuation">,</span>
  navigationTypes<span class="token punctuation">[</span>navigation<span class="token punctuation">.</span><span class="token constant">TYPE_RELOAD</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Navigation through the reload operation or the location.reload() method.&quot;</span><span class="token punctuation">,</span>
  navigationTypes<span class="token punctuation">[</span>navigation<span class="token punctuation">.</span><span class="token constant">TYPE_BACK_FORWARD</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Navigation through a history traversal operation.&quot;</span><span class="token punctuation">,</span>
  navigationTypes<span class="token punctuation">[</span>navigation<span class="token punctuation">.</span><span class="token constant">TYPE_UNDEFINED</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Navigation type is undefined.&quot;</span><span class="token punctuation">,</span>

  console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;window.performance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>performance<span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;Navigation Information&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>navigationTypes<span class="token punctuation">[</span>navigation<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Number of redirects that have taken place: &quot;</span><span class="token punctuation">,</span> navigation<span class="token punctuation">.</span>redirectCount<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token string">&quot;Navigation Information&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;Timing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>timings<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;time&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token string">&quot;Timing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token string">&quot;window.performance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tags" tabindex="-1"><a class="header-anchor" href="#tags" aria-hidden="true">#</a> tags</h3><p>获取页面所有的 标签数量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getTagCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tags <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> tagNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> tags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 把所有标签名转为小写，添加到数组中</span>
    tagNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> tagNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token function">getTagCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="urlquerystring" tabindex="-1"><a class="header-anchor" href="#urlquerystring" aria-hidden="true">#</a> urlquerystring</h3><p>获取当前路径的拼接参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// querystringvalues.js</span>
<span class="token comment">// https://github.com/bgrins/devtools-snippets</span>
<span class="token comment">// Print out key/value pairs from querystring.</span>

<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">var</span> url <span class="token operator">=</span> location<span class="token punctuation">;</span>
  <span class="token keyword">var</span> querystring <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> tab <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">qs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;Key&quot;</span><span class="token operator">:</span> qs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;Value&quot;</span><span class="token operator">:</span> qs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;Pretty Value&quot;</span><span class="token operator">:</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>qs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;Querystring Values&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;URL: &quot;</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">&quot;\\nQS:  &quot;</span><span class="token operator">+</span>querystring<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token string">&quot;Querystring Values&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="varglobal" tabindex="-1"><a class="header-anchor" href="#varglobal" aria-hidden="true">#</a> varglobal</h3><p>在console中打印全局变量，用于检测全局变量的内存泄露。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
 log-globals
 by Sindre Sorhus
 https://github.com/sindresorhus/log-globals
 MIT License

 Logs your global variables to the console. Useful for finding leaked global variables.
 在console中打印全局变量，用于检测全局变量的内存泄露。
*/</span>

<span class="token comment">// 使用了匿名函数，避免了创建新的全局对象。</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

 <span class="token keyword">function</span> <span class="token function">getIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> win <span class="token operator">=</span> el<span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> win<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">function</span> <span class="token function">detectGlobals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个iframe对象，并返回它的contentWindow。</span>
  <span class="token comment">//   这个设计很巧妙，不用自己去找一个全局变量的key了（不同版本的浏览器，key还不一样）。</span>
  <span class="token comment">//  之前写了一个笨方案，就是自己枚举了某个版本window的所有key，https://blog.csdn.net/kinghzking/article/details/122943821。</span>
  <span class="token keyword">var</span> iframe <span class="token operator">=</span> <span class="token function">getIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> ret <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>prop <span class="token keyword">in</span> iframe<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 比较两个window对象，多出来就是新增的对象。</span>
    ret<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">detectGlobals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","index.html.vue"]]);export{k as default};
