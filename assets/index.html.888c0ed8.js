import{_ as n,z as s,A as a,a6 as t}from"./framework.fef63301.js";const p={},e=t(`<h1 id="生成-ast" tabindex="-1"><a class="header-anchor" href="#生成-ast" aria-hidden="true">#</a> 生成 AST</h1><h2 id="vue3-的编译场景" tabindex="-1"><a class="header-anchor" href="#vue3-的编译场景" aria-hidden="true">#</a> vue3 的编译场景</h2><ul><li>web 编译</li><li>SSR 编译</li></ul><h2 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile</h2><ul><li>web 端主要是通过 compile 函数实现模版编译</li><li>compile 拥有两个参数 <ul><li>template 待编译的模版字符串</li><li>options 一些配置信息</li></ul></li><li>compile 内部通过 baseCompile 函数完成编译工作 可以看到 baseCompile 在参数 options 的基础上又拓展了一些配置</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileSFCScript</span><span class="token punctuation">(</span>
  src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>SFCScriptCompileOptions<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  parseOptions<span class="token operator">?</span><span class="token operator">:</span> SFCParseOptions
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> descriptor <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> parseOptions<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">compileScript</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>options<span class="token punctuation">,</span>
    id<span class="token operator">:</span> mockId
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="basecompile" tabindex="-1"><a class="header-anchor" href="#basecompile" aria-hidden="true">#</a> baseCompile</h2><ul><li>主要做了三件事 <ul><li>解析 template 生成 AST 抽象语法树</li><li>AST 转换</li><li>生成代码</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// we name it \`baseCompile\` so that higher order compilers like</span>
<span class="token comment">// @vue/compiler-dom can export \`compile\` while re-exporting everything else.</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>
  template<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RootNode<span class="token punctuation">,</span>
  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>
  <span class="token keyword">const</span> onError <span class="token operator">=</span> options<span class="token punctuation">.</span>onError <span class="token operator">||</span> defaultOnError
  <span class="token keyword">const</span> isModuleMode <span class="token operator">=</span> options<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span>
  <span class="token comment">/* istanbul ignore if */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__BROWSER__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>prefixIdentifiers <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_PREFIX_ID_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isModuleMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_MODULE_MODE_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> prefixIdentifiers <span class="token operator">=</span>
    <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>prefixIdentifiers <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">||</span> isModuleMode<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefixIdentifiers <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>cacheHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_CACHE_HANDLER_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>scopeId <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isModuleMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_SCOPE_ID_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">:</span> template
  <span class="token keyword">const</span> <span class="token punctuation">[</span>nodeTransforms<span class="token punctuation">,</span> directiveTransforms<span class="token punctuation">]</span> <span class="token operator">=</span>
    <span class="token function">getBaseTransformPreset</span><span class="token punctuation">(</span>prefixIdentifiers<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>isTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> expressionPlugins <span class="token punctuation">}</span> <span class="token operator">=</span> options
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>expressionPlugins <span class="token operator">||</span> <span class="token operator">!</span>expressionPlugins<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;typescript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span>expressionPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">(</span>expressionPlugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;typescript&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">transform</span><span class="token punctuation">(</span>
    ast<span class="token punctuation">,</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      prefixIdentifiers<span class="token punctuation">,</span>
      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token operator">...</span>nodeTransforms<span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// user transforms</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      directiveTransforms<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        directiveTransforms<span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// user transforms</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>
    ast<span class="token punctuation">,</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      prefixIdentifiers
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成-ast-1" tabindex="-1"><a class="header-anchor" href="#生成-ast-1" aria-hidden="true">#</a> 生成 AST</h2><ul><li>在计算机科学中 AST 是源代码语法结构的一种抽象表示</li><li>以树状的形式表示编程语言的语法结构</li><li>树上的每一个节点都表示源代码中的一种结构</li><li>AST 是树状结构 对于树中的每个节点 <ul><li>type字段描述节点类型</li><li>tag 字段描述节点标签</li><li>props 字段描述节点属性</li><li>loc 字段描述节点代码位置相关信息</li><li>chilren 字段指向子节点对象数组</li></ul></li><li>AST 中的节点可以完整的描述在模版中所映射的节点信息</li><li>AST 对象的根节点其实是一个虚拟节点 不会映射到一个具体节点 还包含了一些其他属性 <ul><li>会在后续转换到时候赋值</li><li>在生成代码的时候用到</li></ul></li></ul><h2 id="如果通过模版字符串生成-ast" tabindex="-1"><a class="header-anchor" href="#如果通过模版字符串生成-ast" aria-hidden="true">#</a> 如果通过模版字符串生成 AST</h2><ul><li>baseParse 函数完成</li><li>用于两个参数 <ul><li>content 要编译的模版字符串</li><li>options 编译的相关配置</li></ul></li><li>主要做了三件事 <ul><li>创建解析上下文</li><li>解析子节点</li><li>创建AST 根节点</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span> ParserOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> RootNode <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>
    <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function i(c,l){return s(),a("div",null,o)}const r=n(p,[["render",i],["__file","index.html.vue"]]);export{r as default};
