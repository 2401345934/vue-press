import{_ as n,z as s,A as a,a6 as e}from"./framework.fef63301.js";const t={},p=e(`<h1 id="浏览器的-5-种-observer" tabindex="-1"><a class="header-anchor" href="#浏览器的-5-种-observer" aria-hidden="true">#</a> 浏览器的 5 种 Observer</h1><h2 id="intersectionobserver" tabindex="-1"><a class="header-anchor" href="#intersectionobserver" aria-hidden="true">#</a> IntersectionObserver</h2><h3 id="一个元素从不可见到可见-从可见到不可见" tabindex="-1"><a class="header-anchor" href="#一个元素从不可见到可见-从可见到不可见" aria-hidden="true">#</a> 一个元素从不可见到可见，从可见到不可见</h3><p>IntersectionObserver 可以监听一个元素和可视区域相交部分的比例，然后在可视比例达到某个阈值的时候触发回调。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> intersectionObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;info:&#39;</span><span class="token punctuation">)</span>
    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>target<span class="token punctuation">,</span> item<span class="token punctuation">.</span>intersectionRatio<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>intersectionObserver.observe( document.querySelector(&#39;#box1&#39;)); intersectionObserver.observe( document.querySelector(&#39;#box2&#39;));</p><h3 id="这有啥用" tabindex="-1"><a class="header-anchor" href="#这有啥用" aria-hidden="true">#</a> 这有啥用？</h3><p>这太有用了。我们在做一些数据采集的时候，希望知道某个元素是否是可见的，什么时候可见的，就可以用这个 api 来监听，还有做图片的懒加载的时候，可以当可视比例达到某个比例再触发加载。 除了可以监听元素可见性，还可以监听元素的属性和子节点的改变：</p><h2 id="mutationobserver" tabindex="-1"><a class="header-anchor" href="#mutationobserver" aria-hidden="true">#</a> MutationObserver</h2><h3 id="监听一个普通-js-对象的变化-我们会用-object-defineproperty-或者-proxy" tabindex="-1"><a class="header-anchor" href="#监听一个普通-js-对象的变化-我们会用-object-defineproperty-或者-proxy" aria-hidden="true">#</a> 监听一个普通 JS 对象的变化，我们会用 Object.defineProperty 或者 Proxy</h3><p>而监听元素的属性和子节点的变化，我们可以用 MutationObserver： MutationObserver 可以监听对元素的属性的修改、对它的子节点的增删改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mutationObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutationsList</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mutationsList<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

mutationObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="这有啥用-1" tabindex="-1"><a class="header-anchor" href="#这有啥用-1" aria-hidden="true">#</a> 这有啥用？</h3><p>比如文章水印被人通过 devtools 去掉了，那么就可以通过 MutationObserver 监听这个变化，然后重新加上，让水印去不掉。 当然，还有很多别的用途，这里只是介绍功能。 除了监听元素的可见性、属性和子节点的变化，还可以监听大小变化：</p><h2 id="resizeobserver" tabindex="-1"><a class="header-anchor" href="#resizeobserver" aria-hidden="true">#</a> ResizeObserver</h2><h3 id="窗口我们可以用-addeventlistener-监听-resize-事件-那元素呢" tabindex="-1"><a class="header-anchor" href="#窗口我们可以用-addeventlistener-监听-resize-事件-那元素呢" aria-hidden="true">#</a> 窗口我们可以用 addEventListener 监听 resize 事件，那元素呢？</h3><p>元素可以用 ResizeObserver 监听大小的改变，当 width、height 被修改时会触发回调。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> resizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前大小&#39;</span><span class="token punctuation">,</span> entries<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
resizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以拿到元素和它的位置、尺寸。 这样我们就实现了对元素的 resize 的监听。 除了元素的大小、可见性、属性子节点等变化的监听外，还支持对 performance 录制行为的监听：</p><h2 id="performanceobserver" tabindex="-1"><a class="header-anchor" href="#performanceobserver" aria-hidden="true">#</a> PerformanceObserver</h2><p>浏览器提供了 performance 的 api 用于记录一些时间点、某个时间段、资源加载的耗时等。 我们希望记录了 performance 那就马上上报，可是怎么知道啥时候会记录 performance 数据呢？ 用 PeformanceObserver。 PerformanceObserver 用于监听记录 performance 数据的行为，一旦记录了就会触发回调，这样我们就可以在回调里把这些数据上报。 比如 performance 可以用 mark 方法记录某个时间点： performance.mark(&#39;registered-observer&#39;); 用 measure 方法记录某个时间段：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>performance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token string">&#39;button clicked&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;from&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;to&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后两个个参数是时间点，不传代表从开始到现在。 我们可以用 PerformanceObserver 监听它们：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">measureClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>Measure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://p9-passport.byteacctimg.com/img/user-avatar/4e9e751e2b32fb8afbbf559a296ccbf2~300x300.image<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> performanceObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token comment">// 上报</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      performanceObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;resource&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mark&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;measure&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&#39;registered-observer&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">function</span> <span class="token function">measureClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        performance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token string">&#39;button clicked&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 PerformanceObserver 对象，监听 mark（时间点）、measure（时间段）、resource（资源加载耗时） 这三种记录时间的行为。</p><h2 id="reportingobserver" tabindex="-1"><a class="header-anchor" href="#reportingobserver" aria-hidden="true">#</a> ReportingObserver</h2><p>当浏览器运行到过时（deprecation）的 api 的时候，会在控制台打印一个过时的报告:</p><p>浏览器还会在一些情况下对网页行为做一些干预（intervention），比如会把占用 cpu 太多的广告的 iframe 删掉： ReportingObserver 可以监听过时的 api、浏览器干预等报告等的打印，在回调里上报，这些是错误监听无法监听到但对了解网页运行情况很有用的数据。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>监听用户的交互行为，我们会用 addEventListener 来监听 click、mousedown、keydown、input 等事件，但对于元素的变化、performance 的记录、浏览器干预行为这些不是用户交互的事件就要用 XxxObserver 的 api 了。</p><h3 id="浏览器提供了这-5-种-observer" tabindex="-1"><a class="header-anchor" href="#浏览器提供了这-5-种-observer" aria-hidden="true">#</a> 浏览器提供了这 5 种 Observer</h3><ul><li>IntersectionObserver：监听元素可见性变化，常用来做元素显示的数据采集、图片的懒加载</li><li>MutationObserver：监听元素属性和子节点变化，比如可以用来做去不掉的水印</li><li>ResizeObserver：监听元素大小变化 还有两个与元素无关的：</li><li>PerformanceObserver：监听 performance 记录的行为，来上报数据</li><li>ReportingObserver：监听过时的 api、浏览器的一些干预行为的报告，可以让我们更全面的了解网页 app 的运行情况</li></ul>`,32),o=[p];function c(i,r){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","index.html.vue"]]);export{u as default};
