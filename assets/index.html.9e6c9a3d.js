import{_ as a,z as n,A as s,a6 as t}from"./framework.fef63301.js";const e={},o=t(`<h1 id="文件变化时自动运行-npm-script" tabindex="-1"><a class="header-anchor" href="#文件变化时自动运行-npm-script" aria-hidden="true">#</a> 文件变化时自动运行 npm script</h1><h2 id="单元测试自动化" tabindex="-1"><a class="header-anchor" href="#单元测试自动化" aria-hidden="true">#</a> 单元测试自动化</h2><p>幸运的是，mocha 本身支持 --watch 参数，即在代码变化时自动重跑所有的测试，我们只需要在 scripts 对象中新增一条命令即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=test mocha tests/&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>    <span class="token string">&quot;watch:test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm t -- --watch&quot;</span><span class="token punctuation">,</span>
     <span class="token string-property property">&quot;cover&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node scripts/cover.js&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码检查自动化" tabindex="-1"><a class="header-anchor" href="#代码检查自动化" aria-hidden="true">#</a> 代码检查自动化</h2><p>我们使用的代码检查工具 stylelint、eslint、jsonlint 不全支持 watch 模式，这里我们需要借助 onchange 工具包来实现，onchange 可以方便的让我们在文件被修改、添加、删除时运行需要的命令。</p><h3 id="_1-安装项目依赖" tabindex="-1"><a class="header-anchor" href="#_1-安装项目依赖" aria-hidden="true">#</a> 1. 安装项目依赖</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i onchange <span class="token operator">-</span><span class="token constant">D</span>
# npm install onchange <span class="token operator">--</span>save<span class="token operator">-</span>dev
# yarn add onchange <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-添加-npm-script" tabindex="-1"><a class="header-anchor" href="#_2-添加-npm-script" aria-hidden="true">#</a> 2. 添加 npm script</h3><p>按照如下提示添加 watch:lint 和 watch 两个子命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span>    <span class="token string">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm-run-all --parallel watch:*&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>    <span class="token string">&quot;watch:lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;onchange -i \\&quot;**/*.js\\&quot; \\&quot;**/*.less\\&quot; -- npm run lint&quot;</span><span class="token punctuation">,</span>
     <span class="token string-property property">&quot;watch:test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm t -- --watch&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于改动的几点说明" tabindex="-1"><a class="header-anchor" href="#关于改动的几点说明" aria-hidden="true">#</a> 关于改动的几点说明</h3><ul><li>watch:lint 里面的文件匹配模式可以使用通配符，但是模式两边使用了转义的双引号，这样是跨平台兼容的；</li><li>watch:lint 里面的 -i 参数是让 onchange 在启动时就运行一次 -- 之后的命令，即代码没变化的时候，变化前后的对比大多数时候还是有价值的；</li><li>watch 命令实际上是使用了 npm-run-all 来运行所有的 watch 子命令；</li></ul>`,13),p=[o];function r(i,c){return n(),s("div",null,p)}const d=a(e,[["render",r],["__file","index.html.vue"]]);export{d as default};
