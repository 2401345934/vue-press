import{_ as n,z as s,A as a,a6 as t}from"./framework.fef63301.js";const e={},p=t(`<h1 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h1><h2 id="回文字符串的衍生问题" tabindex="-1"><a class="header-anchor" href="#回文字符串的衍生问题" aria-hidden="true">#</a> 回文字符串的衍生问题</h2><h3 id="真题描述-给定一个非空字符串-s-最多删除一个字符。判断是否能成为回文字符串" tabindex="-1"><a class="header-anchor" href="#真题描述-给定一个非空字符串-s-最多删除一个字符。判断是否能成为回文字符串" aria-hidden="true">#</a> 真题描述：给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串</h3><ul><li>示例 1: 输入: &quot;aba&quot;</li><li>输出: True</li><li>示例 2:</li><li>输入: &quot;abca&quot;</li><li>输出: True</li><li>解释: 你可以删除c字符。</li><li>注意: 字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</li></ul><h3 id="思路分析" tabindex="-1"><a class="header-anchor" href="#思路分析" aria-hidden="true">#</a> 思路分析</h3><ul><li>如何判断自己解决回文类问题的解法是否“高效”？其中一个很重要的标准，就是看你对回文字符串的对称特性利用得是否彻底。</li><li>字符串题干中若有“回文”关键字，那么做题时脑海中一定要冒出两个关键字——对称性 和 双指针。这两个工具一起上，足以解决大部分的回文字符串衍生问题。 回到这道题上来，我们首先是初始化两个指针，一个指向字符串头部，另一个指向尾部： <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/16/170e18e4bd1c843a~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"> 如果两个指针所指的字符恰好相等，那么这两个字符就符合了回文字符串对对称性的要求，跳过它们往下走即可。如果两个指针所指的字符串不等，比如这样： <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/16/170e191a29f7b7cb~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"> 那么就意味着不对称发生了，意味着这是一个可以“删掉试试看”的操作点。我们可以分别对左指针字符和右指针字符尝试进行“跳过”，看看区间在 [left+1, right] 或 [left, right-1] 的字符串是否回文。如果是的话，那么就意味着如果删掉被“跳过”那个字符，整个字符串都将回文： <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/16/170e1993aac908fe~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"> 比如说这里我们跳过了 b，[left+1, right] 的区间就是 [2, 2]，它对应 c 这个字符，单个字符一定回文。这样一来，删掉 b 之后，左右指针所指的内部区间是回文的，外部区间也是回文的，可以认为整个字符串就是一个回文字符串了。</li></ul><h3 id="编码实现" tabindex="-1"><a class="header-anchor" href="#编码实现" aria-hidden="true">#</a> 编码实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">validPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缓存字符串的长度</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length
    <span class="token comment">// i、j分别为左右指针</span>
    <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span>
    <span class="token comment">// 当左右指针均满足对称时，一起向中间前进</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">++</span> 
        j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 尝试判断跳过左指针元素后字符串是否回文</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 尝试判断跳过右指针元素后字符串是否回文</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 工具方法，用于判断字符串是否回文</span>
    <span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">st<span class="token punctuation">,</span> ed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token operator">&lt;</span>ed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
            st<span class="token operator">++</span>
            ed<span class="token operator">--</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 默认返回 false</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串匹配问题——正则表达式初相见" tabindex="-1"><a class="header-anchor" href="#字符串匹配问题——正则表达式初相见" aria-hidden="true">#</a> 字符串匹配问题——正则表达式初相见</h2><h3 id="真题描述-设计一个支持以下两种操作的数据结构" tabindex="-1"><a class="header-anchor" href="#真题描述-设计一个支持以下两种操作的数据结构" aria-hidden="true">#</a> 真题描述： 设计一个支持以下两种操作的数据结构</h3><ul><li><p>void addWord(word)</p></li><li><p>bool search(word)</p></li><li><p>search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。</p></li><li><p>. 可以表示任何一个字母。</p></li><li><p>示例: addWord(&quot;bad&quot;)</p><ul><li>addWord(&quot;dad&quot;)</li><li>addWord(&quot;mad&quot;)</li><li>search(&quot;pad&quot;) -&gt; false</li><li>search(&quot;bad&quot;) -&gt; true</li><li>search(&quot;.ad&quot;) -&gt; true</li><li>search(&quot;b..&quot;) -&gt; true</li></ul></li><li><p>说明:</p><ul><li>你可以假设所有单词都是由小写字母 a-z 组成的。</li></ul></li></ul><h3 id="思路分析-1" tabindex="-1"><a class="header-anchor" href="#思路分析-1" aria-hidden="true">#</a> 思路分析</h3><ul><li>这道题要求字符串既可以被添加、又可以被搜索，这就意味着字符串在添加时一定要被存在某处。键值对存储，我们用 Map（或对象字面量来模拟 Map）。</li><li>注意，这里为了降低查找时的复杂度，我们可以考虑以字符串的长度为 key，相同长度的字符串存在一个数组中，这样可以提高我们后续定位的效率。</li><li>难点在于 search 这个 API，它既可以搜索文字，又可以搜索正则表达式。因此我们在搜索前需要额外判断一下，传入的到底是普通字符串，还是正则表达式。若是普通字符串，则直接去 Map 中查找是否有这个 key；若是正则表达式，则创建一个正则表达式对象，判断 Map 中相同长度的字符串里，是否存在一个能够与这个正则相匹配。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 构造函数
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">WordDictionary</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化一个对象字面量，承担 Map 的角色</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
  添加字符串的方法
 */</span>
<span class="token class-name">WordDictionary</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addWord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 若该字符串对应长度的数组已经存在，则只做添加</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>words<span class="token punctuation">[</span>word<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>words<span class="token punctuation">[</span>word<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 若该字符串对应长度的数组还不存在，则先创建</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>words<span class="token punctuation">[</span>word<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>word<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
  搜索方法
 */</span>
<span class="token class-name">WordDictionary</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 若该字符串长度在 Map 中对应的数组根本不存在，则可判断该字符串不存在</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>words<span class="token punctuation">[</span>word<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 缓存目标字符串的长度</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> word<span class="token punctuation">.</span>length
  <span class="token comment">// 如果字符串中不包含‘.’，那么一定是普通字符串</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>word<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定位到和目标字符串长度一致的字符串数组，在其中查找是否存在该字符串</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>words<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>

  <span class="token punctuation">}</span>

  <span class="token comment">// 否则是正则表达式，要先创建正则表达式对象</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>

  <span class="token comment">// 只要数组中有一个匹配正则表达式的字符串，就返回true</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>words<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","index.html.vue"]]);export{r as default};
