import{_ as n,z as s,A as a,a6 as t}from"./framework.fef63301.js";const p={},e=t(`<h1 id="生成预设代码" tabindex="-1"><a class="header-anchor" href="#生成预设代码" aria-hidden="true">#</a> 生成预设代码</h1><p>由于 mode 的值是 modules 所以会执行 genModulePreamble 生成预设代码</p><h2 id="genmodulepreamble" tabindex="-1"><a class="header-anchor" href="#genmodulepreamble" aria-hidden="true">#</a> genModulePreamble</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">genModulePreamble</span><span class="token punctuation">(</span>
  ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>
  context<span class="token operator">:</span> CodegenContext<span class="token punctuation">,</span>
  genScopeId<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
  inline<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    push<span class="token punctuation">,</span>
    newline<span class="token punctuation">,</span>
    optimizeImports<span class="token punctuation">,</span>
    runtimeModuleName<span class="token punctuation">,</span>
    ssrRuntimeModuleName
  <span class="token punctuation">}</span> <span class="token operator">=</span> context

  <span class="token keyword">if</span> <span class="token punctuation">(</span>genScopeId <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">PUSH_SCOPE_ID</span><span class="token punctuation">,</span> <span class="token constant">POP_SCOPE_ID</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// generate import statements for helpers</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>optimizeImports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// when bundled with webpack with code-split, calling an import binding</span>
      <span class="token comment">// as a function leads to it being wrapped with \`Object(a.b)\` or \`(0,a.b)\`,</span>
      <span class="token comment">// incurring both payload size increase and potential perf overhead.</span>
      <span class="token comment">// therefore we assign the imports to variables (which is a constant ~50b</span>
      <span class="token comment">// cost per-component instead of scaling with template size)</span>
      <span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ast<span class="token punctuation">.</span>helpers
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>runtimeModuleName<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
      <span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\n// Binding optimization for webpack code-split\\nconst </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ast<span class="token punctuation">.</span>helpers
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ast<span class="token punctuation">.</span>helpers
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> as _</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>runtimeModuleName<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>ssrHelpers <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span>ssrHelpers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ast<span class="token punctuation">.</span>ssrHelpers
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> as _</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ssrRuntimeModuleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;\\n</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>imports<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genImports</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>imports<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">genHoists</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>hoists<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inline<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helpernamemap" tabindex="-1"><a class="header-anchor" href="#helpernamemap" aria-hidden="true">#</a> helperNameMap</h2><ul><li>每个属性对应的值是一个字符串 就是需要引用的模块或者函数的名称</li><li>创建 vnode 函数 createVnode 是直接通过模块的方式导出的 其他函数都是类似</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Name mapping for runtime helpers that need to be imported from &#39;vue&#39; in</span>
<span class="token comment">// generated code. Make sure these are correctly exported in the runtime!</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> helperNameMap<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">symbol</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">FRAGMENT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Fragment</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">TELEPORT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Teleport</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">SUSPENSE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Suspense</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">KEEP_ALIVE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">KeepAlive</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">BASE_TRANSITION</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">BaseTransition</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">OPEN_BLOCK</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">openBlock</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_BLOCK</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createBlock</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_BLOCK</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createElementBlock</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createElementVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_COMMENT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createCommentVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_TEXT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createTextVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_STATIC</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createStaticVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">RESOLVE_COMPONENT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">resolveComponent</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">RESOLVE_DYNAMIC_COMPONENT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">resolveDynamicComponent</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">RESOLVE_DIRECTIVE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">resolveDirective</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">RESOLVE_FILTER</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">resolveFilter</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">WITH_DIRECTIVES</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">withDirectives</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">RENDER_LIST</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">renderList</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">RENDER_SLOT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">renderSlot</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_SLOTS</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createSlots</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toDisplayString</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">MERGE_PROPS</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mergeProps</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">NORMALIZE_CLASS</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">normalizeClass</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">NORMALIZE_STYLE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">normalizeStyle</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">NORMALIZE_PROPS</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">normalizeProps</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">GUARD_REACTIVE_PROPS</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">guardReactiveProps</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">TO_HANDLERS</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toHandlers</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CAMELIZE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">camelize</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CAPITALIZE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">capitalize</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">TO_HANDLER_KEY</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toHandlerKey</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">SET_BLOCK_TRACKING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">setBlockTracking</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">PUSH_SCOPE_ID</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pushScopeId</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">POP_SCOPE_ID</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">popScopeId</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">WITH_CTX</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">withCtx</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">UNREF</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unref</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">IS_REF</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">isRef</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">WITH_MEMO</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">withMemo</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">IS_MEMO_SAME</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">isMemoSame</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="genhoists" tabindex="-1"><a class="header-anchor" href="#genhoists" aria-hidden="true">#</a> genHoists</h2><ul><li>内部先执行 newline 生成一个空行 然后遍历 hoists 数组 生成静态提升遍历定义的函数</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">function</span> <span class="token function">genHoists</span><span class="token punctuation">(</span>hoists<span class="token operator">:</span> <span class="token punctuation">(</span>JSChildNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  context<span class="token punctuation">.</span>pure <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> newline<span class="token punctuation">,</span> helper<span class="token punctuation">,</span> scopeId<span class="token punctuation">,</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">const</span> genScopeId <span class="token operator">=</span> <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> scopeId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span>
  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// generate inlined withScopeId helper</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>genScopeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">const _withScopeId = n =&gt; (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">helper</span><span class="token punctuation">(</span>
        <span class="token constant">PUSH_SCOPE_ID</span>
      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>scopeId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;),n=n(),</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">POP_SCOPE_ID</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(),n)</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hoists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> exp <span class="token operator">=</span> hoists<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> needScopeIdWrapper <span class="token operator">=</span> genScopeId <span class="token operator">&amp;&amp;</span> exp<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span>
      <span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">const _hoisted_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          needScopeIdWrapper <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PURE_ANNOTATION</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> _withScopeId(() =&gt; </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
      <span class="token function">genNode</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>needScopeIdWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  context<span class="token punctuation">.</span>pure <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
