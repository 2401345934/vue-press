import{_ as a,z as o,A as c,X as i,C as e,T as t,a6 as s,Q as d}from"./framework.fef63301.js";const r={},l=s('<h1 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h1><h2 id="github-actions" tabindex="-1"><a class="header-anchor" href="#github-actions" aria-hidden="true">#</a> GitHub Actions</h2><p>GitHub Actions 是一个持续集成 (Continuous integration)和持续交付 (Continuous delivery)的平台，它可以做到自动化构建、测试、部署。你可以创建工作流，构建和测试每一个 pull request 或者部署合并后的代码到生产环境。</p><p>GitHub Actions 可以在你的代码仓库发生某个事件时运行一个工作流。举个例子，当有人给你的代码仓库新建了一个 issue，你可以跑一个工作流自动的添加合适的标签。</p><p>GitHub 提供了 Linux、Windows、和 macOS 虚拟机运行你的工作流，当然你也可以自定义运行环境。</p><h2 id="github-actions-组件" tabindex="-1"><a class="header-anchor" href="#github-actions-组件" aria-hidden="true">#</a> GitHub Actions 组件</h2><p>你可以配置一个 GitHub Actions <strong>工作流（workflow</strong>），它会在你的仓库发生某个事件时被触发，就比如一个 pull request 或者一个 issue 被创建的时候。</p><p>你的工作流包含一个或者多个<strong>任务（jobs）</strong>， 它们可以并行或者串行执行。每一个任务（jobs）都会在它自己的虚拟机<strong>运行器(runner)<strong>上，任务可以有一个或者多个</strong>步骤（steps）</strong>，可以运行一个自定义的脚本或者运行一个<strong>动作（action）</strong>，所谓动作（action）是一个可复用的扩展，用于简化你的工作流。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e571673188b4746964e20a6314f83f7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h3 id="workflows-工作流" tabindex="-1"><a class="header-anchor" href="#workflows-工作流" aria-hidden="true">#</a> Workflows（工作流）</h3><p>工作流是一个可配置的自动化的程序。创建一个工作流，你需要定义一个 YAML 文件，当你的仓库触发某个事件的时候，工作流就会运行，当然也可以手动触发，或者定义一个时间表。</p><p>一个仓库可以创建多个工作流，每一个都执行不同的步骤，举个例子，一个工作流用于构建和测试 pull request，一个用于部署你的应用，再来一个，当有人新建 issue 的时候自动添加一个标签。</p>',12),u={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Fen%2Factions%2Flearn-github-actions%2Freusing-workflows",title:"https://docs.github.com/en/actions/learn-github-actions/reusing-workflows",target:"_blank",rel:"noopener noreferrer"},p=i("h3",{id:"事件-events",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#事件-events","aria-hidden":"true"},"#"),e(" 事件（Events）")],-1),b=i("p",null,"事件是指仓库触发运行工作流的具体的行为，比如创建一个 pull request，新建一个 issue、或者推送一个 commit。你也可以使用时间表触发一个工作流，或者通过请求一个 REST API，再或者手动触发。",-1),h={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Fen%2Factions%2Freference%2Fevents-that-trigger-workflows",title:"https://docs.github.com/en/actions/reference/events-that-trigger-workflows",target:"_blank",rel:"noopener noreferrer"},v=s('<h3 id="任务-jobs" tabindex="-1"><a class="header-anchor" href="#任务-jobs" aria-hidden="true">#</a> 任务（Jobs）</h3><p>任务是在同一个运行器上执行的一组步骤（steps）。一个步骤（steps）要么是一个shell 脚本（script）要么是一个动作（action）。步骤会顺序执行，并彼此独立。因为每一个步骤都在同一个运行器上被执行，所以你可以从一个步骤（step）传递数据到另一个步骤（step） 。</p><p>你可以配置一个任务依赖其他任务，默认情况下，任务没有依赖，并行执行。当一个任务需要另外一个任务的时候，它会等到依赖的任务完成再执行。</p><h3 id="动作-actions" tabindex="-1"><a class="header-anchor" href="#动作-actions" aria-hidden="true">#</a> 动作（Actions）</h3><p>动作是 GitHub Actions 平台的一个自定义的应用，它会执行一个复杂但是需要频繁重复的作业。使用动作可以减少重复代码。比如一个 action 可以实现从 GitHub 拉取你的 git 仓库，为你的构建环境创建合适的工具链等。</p><p>你可以写自己的动作 ，或者在 GitHub 市场找已经实现好的动作。</p><h3 id="运行器-runners" tabindex="-1"><a class="header-anchor" href="#运行器-runners" aria-hidden="true">#</a> 运行器（Runners）</h3>',7),m={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Fen%2Factions%2Fhosting-your-own-runners",title:"https://docs.github.com/en/actions/hosting-your-own-runners",target:"_blank",rel:"noopener noreferrer"},g=s(`<h2 id="创建一个工作流" tabindex="-1"><a class="header-anchor" href="#创建一个工作流" aria-hidden="true">#</a> 创建一个工作流</h2><p>GitHub Actions 使用 YAML 语法定义工作流。每一个工作流保存为一个独立的 YAML 文件，目录是 <code>.github/workflows</code> 。</p><p>现在我们在代码仓库创建一个示例工作流，当代码被推送的时候，会自动执行一系列的命令。在这个示例工作流中，GitHub Actions 会检出提交的代码，安装依赖，运行 <code>bats -v</code>：</p><ol><li>在你的仓库，创建一个 <code>.github/workflows/</code> 目录</li><li>在 <code>.github/workflows/</code> 目录，创建一个文件，名为 <code>learn-github-actions.yml</code> ，添加下面的代码：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>name: learn-github-actions
on: [push]
jobs:
  check-bats-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: &#39;14&#39;
      - run: npm install -g bats
      - run: bats -v

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>提交这些改动，推送到你的 GitHub 仓库。</li></ol>`,6),f={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions%2Fintroduction-to-github-actions%23viewing-the-jobs-activity",title:"https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions#viewing-the-jobs-activity",target:"_blank",rel:"noopener noreferrer"},x=s(`<h2 id="理解工作流文件" tabindex="-1"><a class="header-anchor" href="#理解工作流文件" aria-hidden="true">#</a> 理解工作流文件</h2><p>为了帮助你理解 YAML 语法，这节会解释例子中的每行代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>name: learn-github-actions

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可选，工作流的名字，会出现在 GitHub 仓库的 Actions 选项栏里。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>on: [push]

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),k=i("code",null,"push",-1),_={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Factions%2Freference%2Fworkflow-syntax-for-github-actions%23onpushpull_requestpaths",title:"https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths",target:"_blank",rel:"noopener noreferrer"},j=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jobs:

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将运行在 <code>learn-github-actions</code> 工作流的所有任务分组在一起。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>check-bats-version:

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>定义了一个名为<code>check-bats-version</code> 的任务，子键（child key）会定义该任务的属性。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  runs-on: ubuntu-latest

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置任务运行在最新的 Ubuntu Linux 运行器。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> steps:

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>check-bats-version</code> 任务下的所有步骤分为一组，嵌套的每一个条目都是一个独立的 action 或者 shell 脚本。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- uses: actions/checkout@v2

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>uses</code> 关键字指定了这个步骤运行 <code>actions/checkout</code> 动作的 <code>v2</code> 大版本 。这是一个可以检出仓库代码到运行器的动作，它允许你运行脚本或者其他动作侵入你的代码（比如构建或者测试工具）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- uses: actions/setup-node@v2
  with:
    node-version: &#39;14&#39;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个步骤会使用 <code>actions/setup-node@v2</code> 动作安装指定版本的 Nodejs ，这会在你的 <code>PATH</code> 加上 <code>node</code> 和 <code>npm</code> 命令。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- run: npm install -g bats

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>run</code> 关键字会告诉任务在运行器上执行一个命令。在这个例子中，你正在使用 <code>npm</code> 安装 <code>bats</code> 软件测试包。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- run: bats -v

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，你运行 <code>bats</code> 命令，传入一个可以打印软件版本的参数。</p><h2 id="可视化工作流文件" tabindex="-1"><a class="header-anchor" href="#可视化工作流文件" aria-hidden="true">#</a> 可视化工作流文件</h2>`,17),w={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions%2Ffinding-and-customizing-actions",title:"https://docs.github.com/cn/actions/learn-github-actions/finding-and-customizing-actions",target:"_blank",rel:"noopener noreferrer"},F=s(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/793521037ba24f5c82c9ae141071ad33~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h2 id="查看工作流活动" tabindex="-1"><a class="header-anchor" href="#查看工作流活动" aria-hidden="true">#</a> 查看工作流活动</h2><p>一旦你的工作流开始运行，你可以在 GitHub 看到一个可视化的运行进度图表 ，查看每一个步骤的执行情况。</p><ol><li>在 GitHub.com ，导航至仓库主页</li><li>在你的仓库名下，点击 <code>Actions</code>。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ea97a5bc77241e58832aec26e1d7054~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><ol start="3"><li>在左侧 sidebar，点击你想查看的工作流</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21c2e97bfaef4bfe8b35cdbe11ffd5c6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><ol start="4"><li>在 <code>Workflow runs</code> ，点击你想查看的运行记录的名称：</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15235d4e7ff84ca2910f7c598c325e70~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><ol start="5"><li>在 Jobs 或者在可视化图表中，点击你想看到的任务：</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/876bdfd61f184baba73206b4363b1cd4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><ol start="6"><li>查看每一个步骤的结果：</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f55f15a850a14c9e948c2efb48de30f7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h2 id="上篇文章代码解析" tabindex="-1"><a class="header-anchor" href="#上篇文章代码解析" aria-hidden="true">#</a> 上篇文章代码解析</h2><p>现在我们再来看 GitHub 同步 Gitee 的代码，是不是就清楚很多了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>name: syncToGitee
on:
  push:
    branches:
      - gh-pages
jobs:
  repo-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Mirror the Github organization repos to Gitee.
        uses: Yikun/hub-mirror-action@master
        with:
          src: &#39;github/mqyqingfeng&#39;
          dst: &#39;gitee/mqyqingfeng&#39;
          dst_key: \${{ secrets.GITEE_PRIVATE_KEY }}
          dst_token:  \${{ secrets.GITEE_TOKEN }}
          static_list: &quot;learn-typescript&quot;
          force_update: true
          debug: true

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子里，我们定义了一个名为 <code>syncToGitee</code> 的工作流，指定代码提交到分支 <code>gh-pages</code> 才触发工作流。</p><p>任务下只有一个名为 <code>repo-sync</code> 的任务，运行在 <code>ubuntu-latest</code>，具体的步骤下，也只有一个名为 <code>Mirror the GitHub organization repos to Gitee.</code> 的步骤，使用了 <code>Yikun/hub-mirror-action@master</code> 动作，而 <code>with</code> 里的内容则是该动作需要的一些参数。</p>`,18);function A(G,y){const n=d("ExternalLinkIcon");return o(),c("div",null,[l,i("p",null,[e("你也可以在一个工作流中引用另外一个工作流，查看「"),i("a",u,[e("可复用工作流"),t(n)]),e("」。")]),p,b,i("p",null,[e("事件完整的列表，可以查看「"),i("a",h,[e("触发工作流的事件"),t(n)]),e("」。")]),v,i("p",null,[e("一个运行器是一个可以运行工作流的服务。每一个运行器一次只运行一个单独的任务。GitHub 提供 Ubuntu Linux，Microsoft Windows 和 macOS 运行器，每一个工作流都运行在一个独立新建的虚拟机中。如果你需要一个不同的操作系统，你可以自定义运行器。请查看「"),i("a",m,[e("自定义运行器"),t(n)]),e("」。")]),g,i("p",null,[e("你的新 GitHub Actions 工作流文件就会被安装在你的仓库，当有人提交代码的时候，工作流就会自动执行。关于一个任务的执行历史，查看「"),i("a",f,[e("查看工作流活动"),t(n)]),e("」章节。")]),x,i("p",null,[e("指定工作流的触发事件。这个例子里，使用是 "),k,e(" 事件，当有人提交了一个代码修改或者合并了一个 pull request ，工作流就会触发。提交到每个分支都会被触发，如果你想在指定分支、路径、标签，查看 「"),i("a",_,[e("GitHub Actions 工作流语法"),t(n)]),e("」")]),j,i("p",null,[e("在这个图表，你可以看到你刚创建的工作流文件，以及这些 GitHub Actions 组件是如何组织的。每一个步骤都会执行一个独立的动作或者脚本文件。任务1 和 2 是运行命令，任务3 和 任务 4 是运行脚本文件。找到更多预构建的动作，查看 「"),i("a",w,[e("查找和自定义动作"),t(n)]),e("」。")]),F])}const q=a(r,[["render",A],["__file","index.html.vue"]]);export{q as default};
