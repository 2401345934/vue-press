import{_ as n,z as s,A as a,a6 as t}from"./framework.fef63301.js";const p={},e=t(`<h1 id="遍历-ast-节点" tabindex="-1"><a class="header-anchor" href="#遍历-ast-节点" aria-hidden="true">#</a> 遍历 AST 节点</h1><ul><li>通过 traverseNode 函数完成</li><li>递归遍历 ast 节点 针对每个节点执行一系列的转换函数 有些还会设计退出函数</li><li>当执行完函数后 会返回一个或多个退出函数</li><li>vue 内置了很多转换函数 处理指令 表达式 元素节点 文本节点等不同的特性</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span>
  node<span class="token operator">:</span> RootNode <span class="token operator">|</span> TemplateChildNode<span class="token punctuation">,</span>
  context<span class="token operator">:</span> TransformContext
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
  <span class="token comment">// apply transform plugins</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> nodeTransforms <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">const</span> exitFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodeTransforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> onExit <span class="token operator">=</span> nodeTransforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>onExit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>onExit<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>currentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// node was removed</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// node may have been replaced</span>
      node <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// inject import for the Comment symbol, which is needed for creating</span>
        <span class="token comment">// comment nodes with \`createVNode\`</span>
        context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_COMMENT</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span>
      <span class="token comment">// no need to traverse, but we need to inject toString helper</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span>

    <span class="token comment">// for container types, further traverse downwards</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF</span><span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>branches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>branches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token operator">:</span>
      <span class="token function">traverseChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// exit transforms</span>
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
  <span class="token keyword">let</span> i <span class="token operator">=</span> exitFns<span class="token punctuation">.</span>length
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    exitFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="element-节点转换函数" tabindex="-1"><a class="header-anchor" href="#element-节点转换函数" aria-hidden="true">#</a> element 节点转换函数</h2><ul><li>transformElement 函数 实现</li><li>会返回一个退出函数 会在该元素节点的子节点逻辑处理完毕之后 退出</li><li>判断这个节点是不是一个 block 节点 <ul><li>为了运行时的更新优化 vue3 设计了一个 block tree 的概念</li><li>将模版基于动态节点指令进行切割的嵌套区块</li><li>每个区块需要一个 array 追踪自身包含的动态节点</li><li>借助 block 节点 将 node 的更新性能 由模版整体大小提升为了 动态内容的数量相关 极大的优化了 diff</li></ul></li><li>然后处理节点的 props <ul><li>从 props 对象进一步解析出指令 vnodeDirectives 动态属性 dynamicPropsNames 以及更新标识 patchFlag</li><li>patchFlag 主要用于标识节点更新的类型</li></ul></li><li>处理节点的 chilren <ul><li>对于组件节点而言 如果有子节点 说明就是组件的插槽会有一些内置组件的处理逻辑</li><li>对于一个普通元素节点来说 直接把节点的 chilren 属性 拿给 vnodeChilren 就行</li><li>当节点只有一个子节点 并且是一个普通文本节点 插值 表达式 就直接把值 赋值给 vnodeChildren</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> transformElement<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// perform the work on exit, after all child expressions have been</span>
  <span class="token comment">// processed and merged.</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">postTransformElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token operator">!</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token operator">!</span><span class="token punctuation">(</span>
        node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">||</span>
          node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> node
    <span class="token keyword">const</span> isComponent <span class="token operator">=</span> node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span>

    <span class="token comment">// The goal of the transform is to create a codegenNode implementing the</span>
    <span class="token comment">// VNodeCall interface.</span>
    <span class="token keyword">let</span> vnodeTag <span class="token operator">=</span> isComponent
      <span class="token operator">?</span> <span class="token function">resolveComponentType</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> ComponentNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>

    <span class="token keyword">const</span> isDynamicComponent <span class="token operator">=</span>
      <span class="token function">isObject</span><span class="token punctuation">(</span>vnodeTag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vnodeTag<span class="token punctuation">.</span>callee <span class="token operator">===</span> <span class="token constant">RESOLVE_DYNAMIC_COMPONENT</span>

    <span class="token keyword">let</span> vnodeProps<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;props&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> vnodeChildren<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;children&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> vnodePatchFlag<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;patchFlag&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> patchFlag<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> vnodeDynamicProps<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;dynamicProps&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> dynamicPropNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
    <span class="token keyword">let</span> vnodeDirectives<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;directives&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">let</span> shouldUseBlock <span class="token operator">=</span>
      <span class="token comment">// dynamic component may resolve to plain elements</span>
      isDynamicComponent <span class="token operator">||</span>
      vnodeTag <span class="token operator">===</span> <span class="token constant">TELEPORT</span> <span class="token operator">||</span>
      vnodeTag <span class="token operator">===</span> <span class="token constant">SUSPENSE</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span><span class="token operator">!</span>isComponent <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// &lt;svg&gt; and &lt;foreignObject&gt; must be forced into blocks so that block</span>
        <span class="token comment">// updates inside get proper isSVG flag at runtime. (#639, #643)</span>
        <span class="token comment">// This is technically web-specific, but splitting the logic out of core</span>
        <span class="token comment">// leads to too much unnecessary complexity.</span>
        <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;svg&#39;</span> <span class="token operator">||</span> tag <span class="token operator">===</span> <span class="token string">&#39;foreignObject&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// props</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> propsBuildResult <span class="token operator">=</span> <span class="token function">buildProps</span><span class="token punctuation">(</span>
        node<span class="token punctuation">,</span>
        context<span class="token punctuation">,</span>
        <span class="token keyword">undefined</span><span class="token punctuation">,</span>
        isComponent<span class="token punctuation">,</span>
        isDynamicComponent
      <span class="token punctuation">)</span>
      vnodeProps <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>props
      patchFlag <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>patchFlag
      dynamicPropNames <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>dynamicPropNames
      <span class="token keyword">const</span> directives <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>directives
      vnodeDirectives <span class="token operator">=</span>
        directives <span class="token operator">&amp;&amp;</span> directives<span class="token punctuation">.</span>length
          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">createArrayExpression</span><span class="token punctuation">(</span>
              directives<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>dir <span class="token operator">=&gt;</span> <span class="token function">buildDirectiveArgs</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span> <span class="token keyword">as</span> DirectiveArguments<span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token keyword">undefined</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>propsBuildResult<span class="token punctuation">.</span>shouldUseBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        shouldUseBlock <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// children</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeTag <span class="token operator">===</span> <span class="token constant">KEEP_ALIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Although a built-in component, we compile KeepAlive with raw children</span>
        <span class="token comment">// instead of slot functions so that it can be used inside Transition</span>
        <span class="token comment">// or other Transition-wrapping HOCs.</span>
        <span class="token comment">// To ensure correct updates with block optimizations, we need to:</span>
        <span class="token comment">// 1. Force keep-alive into a block. This avoids its children being</span>
        <span class="token comment">//    collected by a parent block.</span>
        shouldUseBlock <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token comment">// 2. Force keep-alive to always be updated, since it uses raw children.</span>
        patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">DYNAMIC_SLOTS</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          context<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>
            <span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_KEEP_ALIVE_INVALID_CHILDREN</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
              start<span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">,</span>
              end<span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">.</span>end<span class="token punctuation">,</span>
              source<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> shouldBuildAsSlots <span class="token operator">=</span>
        isComponent <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// Teleport is not a real component and has dedicated runtime handling</span>
        vnodeTag <span class="token operator">!==</span> <span class="token constant">TELEPORT</span> <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// explained above.</span>
        vnodeTag <span class="token operator">!==</span> <span class="token constant">KEEP_ALIVE</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldBuildAsSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> slots<span class="token punctuation">,</span> hasDynamicSlots <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">buildSlots</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
        vnodeChildren <span class="token operator">=</span> slots
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDynamicSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">DYNAMIC_SLOTS</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> vnodeTag <span class="token operator">!==</span> <span class="token constant">TELEPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">const</span> type <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token keyword">type</span>
        <span class="token comment">// check for dynamic text children</span>
        <span class="token keyword">const</span> hasDynamicTextChild <span class="token operator">=</span>
          type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span> <span class="token operator">||</span>
          type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          hasDynamicTextChild <span class="token operator">&amp;&amp;</span>
          <span class="token function">getConstantType</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">===</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// pass directly if the only child is a text node</span>
        <span class="token comment">// (plain / interpolation / expression)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDynamicTextChild <span class="token operator">||</span> type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          vnodeChildren <span class="token operator">=</span> child <span class="token keyword">as</span> TemplateTextChildNode
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          vnodeChildren <span class="token operator">=</span> node<span class="token punctuation">.</span>children
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        vnodeChildren <span class="token operator">=</span> node<span class="token punctuation">.</span>children
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// patchFlag &amp; dynamicPropNames</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// special flags (negative and mutually exclusive)</span>
          vnodePatchFlag <span class="token operator">=</span> patchFlag <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> /* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>PatchFlagNames<span class="token punctuation">[</span>patchFlag<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// bitwise flags</span>
          <span class="token keyword">const</span> flagNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>PatchFlagNames<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> patchFlag <span class="token operator">&amp;</span> n<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> PatchFlagNames<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">, </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          vnodePatchFlag <span class="token operator">=</span> patchFlag <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> /* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>flagNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        vnodePatchFlag <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>patchFlag<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicPropNames <span class="token operator">&amp;&amp;</span> dynamicPropNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vnodeDynamicProps <span class="token operator">=</span> <span class="token function">stringifyDynamicPropNames</span><span class="token punctuation">(</span>dynamicPropNames<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    node<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span>
      context<span class="token punctuation">,</span>
      vnodeTag<span class="token punctuation">,</span>
      vnodeProps<span class="token punctuation">,</span>
      vnodeChildren<span class="token punctuation">,</span>
      vnodePatchFlag<span class="token punctuation">,</span>
      vnodeDynamicProps<span class="token punctuation">,</span>
      vnodeDirectives<span class="token punctuation">,</span>
      <span class="token operator">!</span><span class="token operator">!</span>shouldUseBlock<span class="token punctuation">,</span>
      <span class="token boolean">false</span> <span class="token comment">/* disableTracking */</span><span class="token punctuation">,</span>
      isComponent<span class="token punctuation">,</span>
      node<span class="token punctuation">.</span>loc
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表达式节点转换函数" tabindex="-1"><a class="header-anchor" href="#表达式节点转换函数" aria-hidden="true">#</a> 表达式节点转换函数</h2><ul><li>transformExpression 函数实现</li><li>主要就是转换插值和元素节点中的动态表达式</li><li>内部主要通过 processExporession 函数完成</li><li>模版 执行 parse 生成的表达式节点 node.content 是一个简单的表达式 <ul><li>通过 processExporession 处理后 变成了一个复合表达式的对象</li></ul></li><li>processExporession 内部依赖了 @babel/parse 解析表达式生成 ast 节点 <ul><li>依赖了 estree-walker 遍历了 ast 节点 然后分析判断是否需要对节点添加前缀</li><li>接着修改 ast 节点 转换生成新的表达式对象</li></ul></li><li>因为 @babel/parse 通常是在 node js 使用 本身体积很大 所以生产环境web端不会引入这个库 因为生产环境也不需要对表达式进行转换 <ul><li>web 生产环境 运行时编译会使用 with 方式</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> transformExpression<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">processExpression</span><span class="token punctuation">(</span>
      node<span class="token punctuation">.</span>content <span class="token keyword">as</span> SimpleExpressionNode<span class="token punctuation">,</span>
      context
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle directives on element</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> dir <span class="token operator">=</span> node<span class="token punctuation">.</span>props<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token comment">// do not process for v-on &amp; v-for since they are special handled</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span> <span class="token operator">&amp;&amp;</span> dir<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&#39;for&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> exp <span class="token operator">=</span> dir<span class="token punctuation">.</span>exp
        <span class="token keyword">const</span> arg <span class="token operator">=</span> dir<span class="token punctuation">.</span>arg
        <span class="token comment">// do not process exp if this is v-on:arg - we need special handling</span>
        <span class="token comment">// for wrapping inline statements.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          exp <span class="token operator">&amp;&amp;</span>
          exp<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span> <span class="token operator">&amp;&amp;</span>
          <span class="token operator">!</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;on&#39;</span> <span class="token operator">&amp;&amp;</span> arg<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          dir<span class="token punctuation">.</span>exp <span class="token operator">=</span> <span class="token function">processExpression</span><span class="token punctuation">(</span>
            exp<span class="token punctuation">,</span>
            context<span class="token punctuation">,</span>
            <span class="token comment">// slot args must be processed as function params</span>
            dir<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">&amp;&amp;</span> arg<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>arg<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          dir<span class="token punctuation">.</span>arg <span class="token operator">=</span> <span class="token function">processExpression</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Important: since this function uses Node.js only dependencies, it should</span>
<span class="token comment">// always be used with a leading !__BROWSER__ check so that it can be</span>
<span class="token comment">// tree-shaken from the browser build.</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">processExpression</span><span class="token punctuation">(</span>
  node<span class="token operator">:</span> SimpleExpressionNode<span class="token punctuation">,</span>
  context<span class="token operator">:</span> TransformContext<span class="token punctuation">,</span>
  <span class="token comment">// some expressions like v-slot props &amp; v-for aliases should be parsed as</span>
  <span class="token comment">// function params</span>
  asParams <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// v-on handler values may contain multiple statements</span>
  asRawStatements <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  localVars<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>identifiers<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ExpressionNode <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__BROWSER__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// simple in-browser validation (same logic in 2.x)</span>
      <span class="token function">validateBrowserExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">,</span> asParams<span class="token punctuation">,</span> asRawStatements<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>prefixIdentifiers <span class="token operator">||</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> inline<span class="token punctuation">,</span> bindingMetadata <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">const</span> <span class="token function-variable function">rewriteIdentifier</span> <span class="token operator">=</span> <span class="token punctuation">(</span>raw<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parent<span class="token operator">?</span><span class="token operator">:</span> Node<span class="token punctuation">,</span> id<span class="token operator">?</span><span class="token operator">:</span> Identifier<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>bindingMetadata<span class="token punctuation">,</span> raw<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bindingMetadata<span class="token punctuation">[</span>raw<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inline<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// x = y</span>
      <span class="token keyword">const</span> isAssignmentLVal <span class="token operator">=</span>
        parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;AssignmentExpression&#39;</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left <span class="token operator">===</span> id
      <span class="token comment">// x++</span>
      <span class="token keyword">const</span> isUpdateArg <span class="token operator">=</span>
        parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;UpdateExpression&#39;</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>argument <span class="token operator">===</span> id
      <span class="token comment">// ({ x } = y)</span>
      <span class="token keyword">const</span> isDestructureAssignment <span class="token operator">=</span>
        parent <span class="token operator">&amp;&amp;</span> <span class="token function">isInDestructureAssignment</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> parentStack<span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">SETUP_CONST</span> <span class="token operator">||</span>
        type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">SETUP_REACTIVE_CONST</span> <span class="token operator">||</span>
        localVars<span class="token punctuation">[</span>raw<span class="token punctuation">]</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> raw
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">SETUP_REF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.value</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">SETUP_MAYBE_REF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// const binding that may or may not be ref</span>
        <span class="token comment">// if it&#39;s not a ref, then assignments don&#39;t make sense -</span>
        <span class="token comment">// so we ignore the non-ref assignment case and generate code</span>
        <span class="token comment">// that assumes the value to be a ref for more efficiency</span>
        <span class="token keyword">return</span> isAssignmentLVal <span class="token operator">||</span> isUpdateArg <span class="token operator">||</span> isDestructureAssignment
          <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.value</span><span class="token template-punctuation string">\`</span></span>
          <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>context<span class="token punctuation">.</span><span class="token function">helperString</span><span class="token punctuation">(</span><span class="token constant">UNREF</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">SETUP_LET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAssignmentLVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// let binding.</span>
          <span class="token comment">// this is a bit more tricky as we need to cover the case where</span>
          <span class="token comment">// let is a local non-ref value, and we need to replicate the</span>
          <span class="token comment">// right hand side value.</span>
          <span class="token comment">// x = y --&gt; isRef(x) ? x.value = y : x = y</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> right<span class="token operator">:</span> rVal<span class="token punctuation">,</span> operator <span class="token punctuation">}</span> <span class="token operator">=</span> parent <span class="token keyword">as</span> AssignmentExpression
          <span class="token keyword">const</span> rExp <span class="token operator">=</span> rawExp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>rVal<span class="token punctuation">.</span>start<span class="token operator">!</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rVal<span class="token punctuation">.</span>end<span class="token operator">!</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
          <span class="token keyword">const</span> rExpString <span class="token operator">=</span> <span class="token function">stringifyExpression</span><span class="token punctuation">(</span>
            <span class="token function">processExpression</span><span class="token punctuation">(</span>
              <span class="token function">createSimpleExpression</span><span class="token punctuation">(</span>rExp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              context<span class="token punctuation">,</span>
              <span class="token boolean">false</span><span class="token punctuation">,</span>
              <span class="token boolean">false</span><span class="token punctuation">,</span>
              knownIds
            <span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>context<span class="token punctuation">.</span><span class="token function">helperString</span><span class="token punctuation">(</span><span class="token constant">IS_REF</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
            context<span class="token punctuation">.</span>isTS <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> //@ts-ignore\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>operator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rExpString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isUpdateArg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// make id replace parent in the code range so the raw update operator</span>
          <span class="token comment">// is removed</span>
          id<span class="token operator">!</span><span class="token punctuation">.</span>start <span class="token operator">=</span> parent<span class="token operator">!</span><span class="token punctuation">.</span>start
          id<span class="token operator">!</span><span class="token punctuation">.</span>end <span class="token operator">=</span> parent<span class="token operator">!</span><span class="token punctuation">.</span>end
          <span class="token keyword">const</span> <span class="token punctuation">{</span> prefix<span class="token operator">:</span> isPrefix<span class="token punctuation">,</span> operator <span class="token punctuation">}</span> <span class="token operator">=</span> parent <span class="token keyword">as</span> UpdateExpression
          <span class="token keyword">const</span> prefix <span class="token operator">=</span> isPrefix <span class="token operator">?</span> operator <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
          <span class="token keyword">const</span> postfix <span class="token operator">=</span> isPrefix <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> operator
          <span class="token comment">// let binding.</span>
          <span class="token comment">// x++ --&gt; isRef(a) ? a.value++ : a++</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>context<span class="token punctuation">.</span><span class="token function">helperString</span><span class="token punctuation">(</span><span class="token constant">IS_REF</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
            context<span class="token punctuation">.</span>isTS <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> //@ts-ignore\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.value</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postfix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postfix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isDestructureAssignment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO</span>
          <span class="token comment">// let binding in a destructure assignment - it&#39;s very tricky to</span>
          <span class="token comment">// handle both possible cases here without altering the original</span>
          <span class="token comment">// structure of the code, so we just assume it&#39;s not a ref here</span>
          <span class="token comment">// for now</span>
          <span class="token keyword">return</span> raw
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>context<span class="token punctuation">.</span><span class="token function">helperString</span><span class="token punctuation">(</span><span class="token constant">UNREF</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">PROPS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// use __props which is generated by compileScript so in ts mode</span>
        <span class="token comment">// it gets correct type</span>
        <span class="token class-name"><span class="token keyword">return</span></span> <span class="token function">genPropsAccessExp</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">PROPS_ALIASED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// prop with a different local alias (from defineProps() destructure)</span>
        <span class="token keyword">return</span> <span class="token function">genPropsAccessExp</span><span class="token punctuation">(</span>bindingMetadata<span class="token punctuation">.</span>__propsAliases<span class="token operator">!</span><span class="token punctuation">[</span>raw<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// setup bindings in non-inline mode</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$setup.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">PROPS_ALIASED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$props[&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>bindingMetadata<span class="token punctuation">.</span>__propsAliases<span class="token operator">!</span><span class="token punctuation">[</span>raw<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;]</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// fallback to ctx</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_ctx.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>raw<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>

  <span class="token comment">// fast path if expression is a simple identifier.</span>
  <span class="token keyword">const</span> rawExp <span class="token operator">=</span> node<span class="token punctuation">.</span>content
  <span class="token comment">// bail constant on parens (function invocation) and dot (member access)</span>
  <span class="token keyword">const</span> bailConstant <span class="token operator">=</span> rawExp<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> rawExp<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSimpleIdentifier</span><span class="token punctuation">(</span>rawExp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isScopeVarReference <span class="token operator">=</span> context<span class="token punctuation">.</span>identifiers<span class="token punctuation">[</span>rawExp<span class="token punctuation">]</span>
    <span class="token keyword">const</span> isAllowedGlobal <span class="token operator">=</span> <span class="token function">isGloballyWhitelisted</span><span class="token punctuation">(</span>rawExp<span class="token punctuation">)</span>
    <span class="token keyword">const</span> isLiteral <span class="token operator">=</span> <span class="token function">isLiteralWhitelisted</span><span class="token punctuation">(</span>rawExp<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>asParams <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isScopeVarReference <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isAllowedGlobal <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLiteral<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// const bindings exposed from setup can be skipped for patching but</span>
      <span class="token comment">// cannot be hoisted to module scope</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bindingMetadata<span class="token punctuation">[</span>node<span class="token punctuation">.</span>content<span class="token punctuation">]</span> <span class="token operator">===</span> BindingTypes<span class="token punctuation">.</span><span class="token constant">SETUP_CONST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>constType <span class="token operator">=</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_SKIP_PATCH</span>
      <span class="token punctuation">}</span>
      node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">rewriteIdentifier</span><span class="token punctuation">(</span>rawExp<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isScopeVarReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isLiteral<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>constType <span class="token operator">=</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>constType <span class="token operator">=</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_HOIST</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> ast<span class="token operator">:</span> <span class="token builtin">any</span>
  <span class="token comment">// exp needs to be parsed differently:</span>
  <span class="token comment">// 1. Multiple inline statements (v-on, with presence of \`;\`): parse as raw</span>
  <span class="token comment">//    exp, but make sure to pad with spaces for consistent ranges</span>
  <span class="token comment">// 2. Expressions: wrap with parens (for e.g. object expressions)</span>
  <span class="token comment">// 3. Function arguments (v-for, v-slot): place in a function argument position</span>
  <span class="token keyword">const</span> source <span class="token operator">=</span> asRawStatements
    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rawExp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span>
    <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rawExp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>asParams <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">=&gt;{}</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      plugins<span class="token operator">:</span> context<span class="token punctuation">.</span>expressionPlugins
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>program
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>
      <span class="token function">createCompilerError</span><span class="token punctuation">(</span>
        ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_INVALID_EXPRESSION</span><span class="token punctuation">,</span>
        node<span class="token punctuation">.</span>loc<span class="token punctuation">,</span>
        <span class="token keyword">undefined</span><span class="token punctuation">,</span>
        e<span class="token punctuation">.</span>message
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span>

  <span class="token keyword">type</span> <span class="token class-name">QualifiedId</span> <span class="token operator">=</span> Identifier <span class="token operator">&amp;</span> PrefixMeta
  <span class="token keyword">const</span> ids<span class="token operator">:</span> QualifiedId<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> parentStack<span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> knownIds<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>identifiers<span class="token punctuation">)</span>

  <span class="token function">walkIdentifiers</span><span class="token punctuation">(</span>
    ast<span class="token punctuation">,</span>
    <span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> _<span class="token punctuation">,</span> isReferenced<span class="token punctuation">,</span> isLocal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStaticPropertyKey</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// v2 wrapped filter call</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;_filter_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> needPrefix <span class="token operator">=</span> isReferenced <span class="token operator">&amp;&amp;</span> <span class="token function">canPrefix</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>needPrefix <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLocal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStaticProperty</span><span class="token punctuation">(</span>parent<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>shorthand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// property shorthand like { foo }, we need to add the key since</span>
          <span class="token comment">// we rewrite the value</span>
          <span class="token punctuation">;</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> QualifiedId<span class="token punctuation">)</span><span class="token punctuation">.</span>prefix <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span>
        node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">rewriteIdentifier</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
        ids<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> QualifiedId<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// The identifier is considered constant unless it&#39;s pointing to a</span>
        <span class="token comment">// local scope variable (a v-for alias, or a v-slot prop)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>needPrefix <span class="token operator">&amp;&amp;</span> isLocal<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bailConstant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token punctuation">;</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> QualifiedId<span class="token punctuation">)</span><span class="token punctuation">.</span>isConstant <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// also generate sub-expressions for other identifiers for better</span>
        <span class="token comment">// source map support. (except for property keys which are static)</span>
        ids<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> QualifiedId<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// invoke on ALL identifiers</span>
    parentStack<span class="token punctuation">,</span>
    knownIds
  <span class="token punctuation">)</span>

  <span class="token comment">// We break up the compound expression into an array of strings and sub</span>
  <span class="token comment">// expressions (for identifiers that have been prefixed). In codegen, if</span>
  <span class="token comment">// an ExpressionNode has the \`.children\` property, it will be used instead of</span>
  <span class="token comment">// \`.content\`.</span>
  <span class="token keyword">const</span> children<span class="token operator">:</span> CompoundExpressionNode<span class="token punctuation">[</span><span class="token string">&#39;children&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  ids<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>start <span class="token operator">-</span> b<span class="token punctuation">.</span>start<span class="token punctuation">)</span>
  ids<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// range is offset by -1 due to the wrapping parens when parsed</span>
    <span class="token keyword">const</span> start <span class="token operator">=</span> id<span class="token punctuation">.</span>start <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">const</span> end <span class="token operator">=</span> id<span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">const</span> last <span class="token operator">=</span> ids<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> leadingText <span class="token operator">=</span> rawExp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>last <span class="token operator">?</span> last<span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leadingText<span class="token punctuation">.</span>length <span class="token operator">||</span> id<span class="token punctuation">.</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leadingText <span class="token operator">+</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span>prefix <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> source <span class="token operator">=</span> rawExp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
    children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token function">createSimpleExpression</span><span class="token punctuation">(</span>
        id<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          source<span class="token punctuation">,</span>
          start<span class="token operator">:</span> <span class="token function">advancePositionWithClone</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">,</span> source<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span>
          end<span class="token operator">:</span> <span class="token function">advancePositionWithClone</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">,</span> source<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        id<span class="token punctuation">.</span>isConstant <span class="token operator">?</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span> <span class="token operator">:</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> ids<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">&lt;</span> rawExp<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rawExp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> ret
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> <span class="token function">createCompoundExpression</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> node<span class="token punctuation">.</span>loc<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> node
    ret<span class="token punctuation">.</span>constType <span class="token operator">=</span> bailConstant
      <span class="token operator">?</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
      <span class="token operator">:</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span>
  <span class="token punctuation">}</span>
  ret<span class="token punctuation">.</span>identifiers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>knownIds<span class="token punctuation">)</span>
  <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="text-节点转换函数" tabindex="-1"><a class="header-anchor" href="#text-节点转换函数" aria-hidden="true">#</a> Text 节点转换函数</h2><ul><li>transformText 函数实现</li><li>只处理 根节点 元素节点 v-for 以及 v-if 分支相关节点</li><li>会返回一个退出函数 因为要保证所有表达式节点都已经处理完毕才执行转换逻辑</li><li>目的就是 合并一些相邻的文本节点 然后为内部每一个文本节点创建一个代码生成节点</li><li>在内部 静态文本节点和动态插值节点都被看作成一个文本节点 所以函数首先遍历节点的子节点 然后把子节点相邻的文本节点合并成一个</li><li>合并完子文本节点后 判断是不是只带有单个文本子元素的纯元素节点 且元素上不存在自定义指令 那么不需要转换 因为 运行时可用通过设置元素的 textContent 直接更新文本</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token comment">// Merge adjacent text nodes and expressions into a single expression</span>
<span class="token comment">// e.g. &lt;div&gt;abc {{ d }} {{ e }}&lt;/div&gt; should have a single expression node as child.</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> transformText<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// perform the transform on node exit so that all expressions have already</span>
    <span class="token comment">// been processed.</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>children
      <span class="token keyword">let</span> currentContainer<span class="token operator">:</span> CompoundExpressionNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
      <span class="token keyword">let</span> hasText <span class="token operator">=</span> <span class="token boolean">false</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          hasText <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> next <span class="token operator">=</span> children<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                currentContainer <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createCompoundExpression</span><span class="token punctuation">(</span>
                  <span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span>
                  child<span class="token punctuation">.</span>loc
                <span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
              <span class="token comment">// merge adjacent text node into current</span>
              currentContainer<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> + </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> next<span class="token punctuation">)</span>
              children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
              j<span class="token operator">--</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              currentContainer <span class="token operator">=</span> <span class="token keyword">undefined</span>
              <span class="token keyword">break</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token operator">!</span>hasText <span class="token operator">||</span>
        <span class="token comment">// if this is a plain element with a single text child, leave it</span>
        <span class="token comment">// as-is since the runtime has dedicated fast path for this by directly</span>
        <span class="token comment">// setting textContent of the element.</span>
        <span class="token comment">// for component root it&#39;s always normalized anyway.</span>
        <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
          <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span> <span class="token operator">||</span>
            <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span>
              node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span>
              <span class="token comment">// #3756</span>
              <span class="token comment">// custom directives can potentially add DOM elements arbitrarily,</span>
              <span class="token comment">// we need to avoid setting textContent of the element at runtime</span>
              <span class="token comment">// to avoid accidentally overwriting the DOM elements added</span>
              <span class="token comment">// by the user through custom directives.</span>
              <span class="token operator">!</span>node<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
                p <span class="token operator">=&gt;</span>
                  p<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span> <span class="token operator">&amp;&amp;</span>
                  <span class="token operator">!</span>context<span class="token punctuation">.</span>directiveTransforms<span class="token punctuation">[</span>p<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
              <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
              <span class="token comment">// in compat mode, &lt;template&gt; tags with no special directives</span>
              <span class="token comment">// will be rendered as a fragment so its children must be</span>
              <span class="token comment">// converted into vnodes.</span>
              <span class="token operator">!</span><span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// pre-convert text nodes into createTextVNode(text) calls to avoid</span>
      <span class="token comment">// runtime normalization.</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">||</span> child<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> callArgs<span class="token operator">:</span> CallExpression<span class="token punctuation">[</span><span class="token string">&#39;arguments&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token comment">// createTextVNode defaults to single whitespace, so if it is a</span>
          <span class="token comment">// single space the code could be an empty call to save bytes.</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">!==</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span> <span class="token operator">||</span> child<span class="token punctuation">.</span>content <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            callArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// mark dynamic text with flag so it gets patched inside a block</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>
            <span class="token operator">!</span>context<span class="token punctuation">.</span>ssr <span class="token operator">&amp;&amp;</span>
            <span class="token function">getConstantType</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">===</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>
          <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            callArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
              PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span> <span class="token operator">+</span>
                <span class="token punctuation">(</span>__DEV__ <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> /* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>PatchFlagNames<span class="token punctuation">[</span>PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT_CALL</span><span class="token punctuation">,</span>
            content<span class="token operator">:</span> child<span class="token punctuation">,</span>
            loc<span class="token operator">:</span> child<span class="token punctuation">.</span>loc<span class="token punctuation">,</span>
            codegenNode<span class="token operator">:</span> <span class="token function">createCallExpression</span><span class="token punctuation">(</span>
              context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_TEXT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              callArgs
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","index.html.vue"]]);export{r as default};
