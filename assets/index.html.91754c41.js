import{_ as n,z as s,A as a,a6 as p}from"./framework.fef63301.js";const t={},e=p(`<h1 id="组件的-props" tabindex="-1"><a class="header-anchor" href="#组件的-props" aria-hidden="true">#</a> 组件的 props</h1><h2 id="props-配置的标准化" tabindex="-1"><a class="header-anchor" href="#props-配置的标准化" aria-hidden="true">#</a> props 配置的标准化</h2><ul><li>标准化 props 的配置是通过 normalizePropsOptions 函数完成的</li><li>normalizePropsOptions 会先处理 mixin 和 extends 两个特殊属性 都是拓展组件的定义 需要对其定义的 props 递归执行 normalizePropsOptions</li><li>会对定义不同形式的 props 进行转换 最终返回标准化结果</li><li>会用 comp._props 进行缓存 对一个组件重复执行 normalizePropsOptions 会返回 缓存的结果</li><li>最后使用 instance.propsOptions 存储标准化结果 方便后续统一处理</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">normalizePropsOptions</span><span class="token punctuation">(</span>
  comp<span class="token operator">:</span> ConcreteComponent<span class="token punctuation">,</span>
  appContext<span class="token operator">:</span> AppContext<span class="token punctuation">,</span>
  asMixin <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token operator">:</span> NormalizedPropsOptions <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> appContext<span class="token punctuation">.</span>propsCache
  <span class="token keyword">const</span> cached <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cached
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> raw <span class="token operator">=</span> comp<span class="token punctuation">.</span>props
  <span class="token keyword">const</span> normalized<span class="token operator">:</span> NormalizedPropsOptions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> needCastKeys<span class="token operator">:</span> NormalizedPropsOptions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// apply mixin/extends props</span>
  <span class="token keyword">let</span> hasExtends <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_OPTIONS_API__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">extendProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>raw<span class="token operator">:</span> ComponentOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        raw <span class="token operator">=</span> raw<span class="token punctuation">.</span>options
      <span class="token punctuation">}</span>
      hasExtends <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>props<span class="token punctuation">,</span> keys<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">normalizePropsOptions</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> appContext<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token function">extend</span><span class="token punctuation">(</span>normalized<span class="token punctuation">,</span> props<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">)</span> needCastKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>keys<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>asMixin <span class="token operator">&amp;&amp;</span> appContext<span class="token punctuation">.</span>mixins<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      appContext<span class="token punctuation">.</span>mixins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>extendProps<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">.</span>extends<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">extendProps</span><span class="token punctuation">(</span>comp<span class="token punctuation">.</span>extends<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">.</span>mixins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      comp<span class="token punctuation">.</span>mixins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>extendProps<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>raw <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hasExtends<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> <span class="token constant">EMPTY_ARR</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">EMPTY_ARR</span> <span class="token keyword">as</span> <span class="token builtin">any</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> raw<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">props must be strings when using array syntax.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> normalizedKey <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validatePropName</span><span class="token punctuation">(</span>normalizedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        normalized<span class="token punctuation">[</span>normalizedKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">invalid props options</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> raw<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> normalizedKey <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validatePropName</span><span class="token punctuation">(</span>normalizedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> opt <span class="token operator">=</span> raw<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">const</span> prop<span class="token operator">:</span> NormalizedProp <span class="token operator">=</span> <span class="token punctuation">(</span>normalized<span class="token punctuation">[</span>normalizedKey<span class="token punctuation">]</span> <span class="token operator">=</span>
          <span class="token function">isArray</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> opt <span class="token punctuation">}</span> <span class="token operator">:</span> opt<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> booleanIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
          <span class="token keyword">const</span> stringIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
          prop<span class="token punctuation">[</span>BooleanFlags<span class="token punctuation">.</span>shouldCast<span class="token punctuation">]</span> <span class="token operator">=</span> booleanIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
          prop<span class="token punctuation">[</span>BooleanFlags<span class="token punctuation">.</span>shouldCastTrue<span class="token punctuation">]</span> <span class="token operator">=</span>
            stringIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> booleanIndex <span class="token operator">&lt;</span> stringIndex
          <span class="token comment">// if the prop needs boolean casting or default value</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            needCastKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>normalizedKey<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> res<span class="token operator">:</span> NormalizedPropsOptions <span class="token operator">=</span> <span class="token punctuation">[</span>normalized<span class="token punctuation">,</span> needCastKeys<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="props-值的初始化" tabindex="-1"><a class="header-anchor" href="#props-值的初始化" aria-hidden="true">#</a> props 值的初始化</h2><ul><li>有了标准化的 props 配置 还需要根据配置对父组件传递的 props 数据做一些求值和验证 然后把结果 赋值到组件的实例上 过程就是 props 的初始化</li><li>初始化就是 通过 initProps 函数完成的</li><li>initProps 主要是 设置 props 的值 验证 props 是否合法 把 props 变成响应式的 然后添加到实例的 instance.props上</li></ul><h2 id="设置props" tabindex="-1"><a class="header-anchor" href="#设置props" aria-hidden="true">#</a> 设置props</h2><ul><li>通过 setFullProps 实现</li><li>setFullProps 主要目的就是遍历 props 数据求值 以及对需要转换的 props 求值</li><li>该过程就是遍历 rawProps 获取每个 key 对应的值并赋值给 props 或者 attrs</li><li>因为我们在标准化 props 配置的过程中已经把 props 定义的 key 转换成了 驼峰形式</li><li>然后对比查看传递的props数据是否已经在配置中定义 <ul><li>如果已经定义 就把值赋值到 props 对象中</li><li>如果没有定义 判断这个 key 是否为非事件派发相关</li><li>若是 则把它的值赋到 attrs 对象中作为普通属性</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">setFullProps</span><span class="token punctuation">(</span>
  instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>
  rawProps<span class="token operator">:</span> Data <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> Data<span class="token punctuation">,</span>
  attrs<span class="token operator">:</span> Data
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>options<span class="token punctuation">,</span> needCastKeys<span class="token punctuation">]</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>propsOptions
  <span class="token keyword">let</span> hasAttrsChanged <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">let</span> rawCastValues<span class="token operator">:</span> Data <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rawProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> rawProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// key, ref are reserved and never passed down</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedProp</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;onHook:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">softAssertCompatEnabled</span><span class="token punctuation">(</span>
            DeprecationTypes<span class="token punctuation">.</span><span class="token constant">INSTANCE_EVENT_HOOKS</span><span class="token punctuation">,</span>
            instance<span class="token punctuation">,</span>
            key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;inline-template&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> value <span class="token operator">=</span> rawProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token comment">// prop option names are camelized during normalization, so to support</span>
      <span class="token comment">// kebab -&gt; camel conversion here we need to camelize the key.</span>
      <span class="token keyword">let</span> camelKey
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span>camelKey <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>needCastKeys <span class="token operator">||</span> <span class="token operator">!</span>needCastKeys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>camelKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          props<span class="token punctuation">[</span>camelKey<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token punctuation">;</span><span class="token punctuation">(</span>rawCastValues <span class="token operator">||</span> <span class="token punctuation">(</span>rawCastValues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>camelKey<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmitListener</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>emitsOptions<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Any non-declared (either as a prop or an emitted event) props are put</span>
        <span class="token comment">// into a separate \`attrs\` object for spreading. Make sure to preserve</span>
        <span class="token comment">// original key casing</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Native&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            key <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// remove Native postfix</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldSkipAttr</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> attrs<span class="token punctuation">)</span> <span class="token operator">||</span> value <span class="token operator">!==</span> attrs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          attrs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
          hasAttrsChanged <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>needCastKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rawCurrentProps <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">const</span> castValues <span class="token operator">=</span> rawCastValues <span class="token operator">||</span> <span class="token constant">EMPTY_OBJ</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> needCastKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> needCastKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">resolvePropValue</span><span class="token punctuation">(</span>
        options<span class="token operator">!</span><span class="token punctuation">,</span>
        rawCurrentProps<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
        castValues<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>
        instance<span class="token punctuation">,</span>
        <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>castValues<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> hasAttrsChanged
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证props" tabindex="-1"><a class="header-anchor" href="#验证props" aria-hidden="true">#</a> 验证props</h2><ul><li>validateProp 函数用来检测 props 求的的值 是否合法 如不匹配则会抛出警告</li><li>validateProp 首先验证 required 情况 然后验证 prop 值的类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  prop<span class="token operator">:</span> PropOptions<span class="token punctuation">,</span>
  isAbsent<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> required<span class="token punctuation">,</span> validator <span class="token punctuation">}</span> <span class="token operator">=</span> prop
  <span class="token comment">// required!</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">&amp;&amp;</span> isAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Missing required prop: &quot;&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// missing but optional</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prop<span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// type check</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isValid <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">?</span> type <span class="token operator">:</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span>
    <span class="token keyword">const</span> expectedTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// value is valid as long as one of the specified types match</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> types<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isValid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> valid<span class="token punctuation">,</span> expectedType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">assertType</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      expectedTypes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>expectedType <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      isValid <span class="token operator">=</span> valid
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token function">getInvalidTypeMessage</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expectedTypes<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// custom validator</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>validator <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">validator</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid prop: custom validator check failed for prop &quot;&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;&quot;.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式处理" tabindex="-1"><a class="header-anchor" href="#响应式处理" aria-hidden="true">#</a> 响应式处理</h2><ul><li>通过 shallowReactive API变成响应式</li></ul><h2 id="props-的更新" tabindex="-1"><a class="header-anchor" href="#props-的更新" aria-hidden="true">#</a> props 的更新</h2><ul><li>props 数据的更新 会触发组件的重新</li></ul><h2 id="触发子组件的重新渲染" tabindex="-1"><a class="header-anchor" href="#触发子组件的重新渲染" aria-hidden="true">#</a> 触发子组件的重新渲染</h2><ul><li>组件的重新渲染会触发 patch 流程 然后遍历子节点 递归 patch 遇到组件节点 执行 updateComponent 函数</li><li>会执行 shouldUpdateComponent 函数判断是否需要更新 内部会对 props 进行对比</li><li>这是触发子组件重新渲染的原因</li><li>然后也需要更新 子组件实例的 instance.props</li></ul><h2 id="更新-instance-props" tabindex="-1"><a class="header-anchor" href="#更新-instance-props" aria-hidden="true">#</a> 更新 instance.props</h2><ul><li>其实就是执行 componentUpdateFn 组件副作用函数</li><li>在更新组件的时候 会判断是否有 instance.next 代表新的组件 vnode</li><li>如果有 会执行 updateComponentPreRender 更新组件 vnode 节点信息</li><li>updateComponentPreRender 其中会执行 updateProps 更新 props 数据</li><li>updateProps 把父组件渲染时获得的 props 新值 更新到子组件实例的 instnace.props 中 <ul><li>只需要对比 动态的 props 数据更新</li><li>静态的 props 会跳过</li></ul></li></ul><h2 id="把-instance-props-变成响应式的" tabindex="-1"><a class="header-anchor" href="#把-instance-props-变成响应式的" aria-hidden="true">#</a> 把 instance.props 变成响应式的</h2><ul><li>为什么使用 shallowReactive 而不是 reactive</li><li>shallowReactive 不会递归执行 reactive 只劫持最外一层对象的属性</li><li>shallowReactive 性能更好 props 更新过程只需要修改最外层属性</li></ul><h2 id="对象类型-props-数据的更新" tabindex="-1"><a class="header-anchor" href="#对象类型-props-数据的更新" aria-hidden="true">#</a> 对象类型 props 数据的更新</h2><ul><li>对象类型的 props 数据变化 也会触发子组件的重新渲染</li><li>子组件的渲染过程中 访问 对象props 相当于 子组件的渲染副作用函数 render effect 订阅了这个数据的变化</li><li>当修改 props 得数据的时候 就会触发 render effect 的再次执行 从而导致子组件的重新渲染</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>props 在组件设置是一个非常重要的特性 允许组件的使用者在外层传递 props</li><li>组件内部就可以根据 props 实现各种功能</li><li>由于编写 props 到方式非常灵活 需要对他进行一层标准化 方便后续处理</li><li>props 的初始化流程 包括props 的求值 验证 已经响应式处理</li><li>当组件传入的 props 数据发生变化 会触发子组件的重新渲染</li></ul>`,26),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","index.html.vue"]]);export{r as default};
