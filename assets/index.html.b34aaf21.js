import{_ as a,z as e,A as i,a6 as r}from"./framework.fef63301.js";const h="/vue-press/assets/tcp-udp1.7807ab72.webp",d="/vue-press/assets/tcp-udp2.71a1be3c.webp",l="/vue-press/assets/tcp-udp3.fc6ba39b.webp",t="/vue-press/assets/tcp-udp4.277517e3.webp",p="/vue-press/assets/tcp-udp5.eebaafcf.webp",c="/vue-press/assets/tcp-udp6.dca67c9f.webp",n={},s=r('<h1 id="tcp和udp的区别" tabindex="-1"><a class="header-anchor" href="#tcp和udp的区别" aria-hidden="true">#</a> TCP和UDP的区别</h1><ul><li>TCP是面向链接的，而UDP是面向无连接的。</li><li>TCP仅支持单播传输，UDP 提供了单播，多播，广播的功能。</li><li>TCP的三次握手保证了连接的可靠性; UDP是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</li><li>UDP的头部开销比TCP的更小，数据传输速率更高，实时性更好。</li></ul><h2 id="一、tcp-ip网络模型" tabindex="-1"><a class="header-anchor" href="#一、tcp-ip网络模型" aria-hidden="true">#</a> 一、TCP/IP网络模型</h2><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。</p><p>TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</p><p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p><ul><li>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</li><li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li><li>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li><li>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。 <img src="'+h+'" alt="图片"></li></ul><p>在网络体系结构中网络通信的建立必须是在通信双方的对等层进行，不能交错。 在整个数据传输过程中，数据在发送端时经过各层时都要附加上相应层的协议头和协议尾（仅数据链路层需要封装协议尾）部分，也就是要对数据进行协议封装，以标识对应层所用的通信协议。接下去介绍TCP/IP 中有两个具有代表性的传输层协议----TCP 和 UDP。</p><h2 id="二、udp" tabindex="-1"><a class="header-anchor" href="#二、udp" aria-hidden="true">#</a> 二、UDP</h2><p>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><h3 id="它有以下几个特点" tabindex="-1"><a class="header-anchor" href="#它有以下几个特点" aria-hidden="true">#</a> 它有以下几个特点</h3><h4 id="_1-面向无连接" tabindex="-1"><a class="header-anchor" href="#_1-面向无连接" aria-hidden="true">#</a> 1. 面向无连接</h4><p>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p><p>具体来说就是：</p><ul><li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li><li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li></ul><h4 id="_2-有单播-多播-广播的功能" tabindex="-1"><a class="header-anchor" href="#_2-有单播-多播-广播的功能" aria-hidden="true">#</a> 2. 有单播，多播，广播的功能</h4><p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p><h4 id="_3-udp是面向报文的" tabindex="-1"><a class="header-anchor" href="#_3-udp是面向报文的" aria-hidden="true">#</a> 3. UDP是面向报文的</h4><p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p><h4 id="_4-不可靠性" tabindex="-1"><a class="header-anchor" href="#_4-不可靠性" aria-hidden="true">#</a> 4. 不可靠性</h4><p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。</p><p>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p><p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。 <img src="'+d+'" alt="图片"></p><p>从上面的动态图可以得知，UDP只会把想发的数据报文一股脑的丢给对方，并不在意数据有无安全完整到达。</p><h4 id="_5-头部开销小-传输数据报文时是很高效的" tabindex="-1"><a class="header-anchor" href="#_5-头部开销小-传输数据报文时是很高效的" aria-hidden="true">#</a> 5. 头部开销小，传输数据报文时是很高效的</h4><p><img src="'+l+'" alt="图片"></p><p>UDP 头部包含了以下几个数据：</p><ul><li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li><li>整个数据报文的长度</li><li>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</li><li>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的</li></ul><h3 id="三、tcp" tabindex="-1"><a class="header-anchor" href="#三、tcp" aria-hidden="true">#</a> 三、TCP</h3><p>当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如，当你想查看网页或查看电子邮件时，希望完整且按顺序查看网页，而不丢失任何内容。当你下载文件时，希望获得的是完整的文件，而不仅仅是文件的一部分，因为如果数据丢失或乱序，都不是你希望得到的结果，于是就用到了TCP。</p><p>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</p><h4 id="_1-tcp连接过程" tabindex="-1"><a class="header-anchor" href="#_1-tcp连接过程" aria-hidden="true">#</a> 1. TCP连接过程</h4><p><img src="'+t+'" alt="图片"></p><p>如下图所示，可以看到建立一个TCP连接的过程为（三次握手的过程）:</p><h4 id="第一次握手" tabindex="-1"><a class="header-anchor" href="#第一次握手" aria-hidden="true">#</a> 第一次握手</h4><p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</p><h4 id="第二次握手" tabindex="-1"><a class="header-anchor" href="#第二次握手" aria-hidden="true">#</a> 第二次握手</h4><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p><h4 id="第三次握手" tabindex="-1"><a class="header-anchor" href="#第三次握手" aria-hidden="true">#</a> 第三次握手</h4><p><img src="'+p+'" alt="图片"></p><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p><p>这里可能大家会有个疑惑：为什么 TCP 建立连接需要三次握手，而不是两次？这是因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。</p><h3 id="_2-tcp断开链接" tabindex="-1"><a class="header-anchor" href="#_2-tcp断开链接" aria-hidden="true">#</a> 2. TCP断开链接</h3><p><img src="'+c+'" alt="图片"></p><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p><h4 id="第一次握手-1" tabindex="-1"><a class="header-anchor" href="#第一次握手-1" aria-hidden="true">#</a> 第一次握手</h4><p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p><h4 id="第二次握手-1" tabindex="-1"><a class="header-anchor" href="#第二次握手-1" aria-hidden="true">#</a> 第二次握手</h4><p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。</p><h4 id="第三次握手-1" tabindex="-1"><a class="header-anchor" href="#第三次握手-1" aria-hidden="true">#</a> 第三次握手</h4><p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p><h4 id="第四次握手" tabindex="-1"><a class="header-anchor" href="#第四次握手" aria-hidden="true">#</a> 第四次握手</h4><ul><li><p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。</p></li><li><p>该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</p></li></ul><h3 id="_3-tcp协议的特点" tabindex="-1"><a class="header-anchor" href="#_3-tcp协议的特点" aria-hidden="true">#</a> 3. TCP协议的特点</h3><h4 id="面向连接" tabindex="-1"><a class="header-anchor" href="#面向连接" aria-hidden="true">#</a> 面向连接</h4><p>面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。</p><h4 id="仅支持单播传输" tabindex="-1"><a class="header-anchor" href="#仅支持单播传输" aria-hidden="true">#</a> 仅支持单播传输</h4><p>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</p><h4 id="面向字节流" tabindex="-1"><a class="header-anchor" href="#面向字节流" aria-hidden="true">#</a> 面向字节流</h4><p>TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p><h4 id="可靠传输" tabindex="-1"><a class="header-anchor" href="#可靠传输" aria-hidden="true">#</a> 可靠传输</h4><p>对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。</p><h4 id="提供拥塞控制" tabindex="-1"><a class="header-anchor" href="#提供拥塞控制" aria-hidden="true">#</a> 提供拥塞控制</h4><p>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞</p><h4 id="tcp提供全双工通信" tabindex="-1"><a class="header-anchor" href="#tcp提供全双工通信" aria-hidden="true">#</a> TCP提供全双工通信</h4><p>TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）</p><h3 id="四、tcp和udp的比较" tabindex="-1"><a class="header-anchor" href="#四、tcp和udp的比较" aria-hidden="true">#</a> 四、TCP和UDP的比较</h3><h4 id="_1-对比" tabindex="-1"><a class="header-anchor" href="#_1-对比" aria-hidden="true">#</a> 1. 对比</h4><h4 id="udp-tcp" tabindex="-1"><a class="header-anchor" href="#udp-tcp" aria-hidden="true">#</a> UDP TCP</h4><ul><li>是否连接 无连接 面向连接</li><li>是否可靠 不可靠传输，不使用流量控制和拥塞控制 可靠传输，使用流量控制和拥塞控制</li><li>连接对象个数 支持一对一，一对多，多对一和多对多交互通信 只能是一对一通信</li><li>传输方式 面向报文 面向字节流</li><li>首部开销 首部开销小，仅8字节 首部最小20字节，最大60字节</li><li>适用场景 适用于实时应用（IP电话、视频会议、直播等） 适用于要求可靠传输的应用，例如文件传输</li></ul><h3 id="五、tcp-和-udp-应用场景" tabindex="-1"><a class="header-anchor" href="#五、tcp-和-udp-应用场景" aria-hidden="true">#</a> 五、TCP 和 UDP 应用场景</h3><ul><li><p>UDP的应用场景：即时通信。面向数据报方式；网络数据大多为短消息；拥有大量客户端；对数据安全性无特殊要求；网络负担重但对响应速度要求高的场景。eg: IP电话、实时视频会议等。</p></li><li><p>TCP的应用场景：对数据准确性要求高，速度可以相对较慢的。eg: 文件传输、邮件的发送与接收等。</p></li></ul><h3 id="六、运行在tcp-或udp的应用层协议分析" tabindex="-1"><a class="header-anchor" href="#六、运行在tcp-或udp的应用层协议分析" aria-hidden="true">#</a> 六、运行在TCP 或UDP的应用层协议分析</h3><h4 id="运行在tcp协议上的协议" tabindex="-1"><a class="header-anchor" href="#运行在tcp协议上的协议" aria-hidden="true">#</a> 运行在TCP协议上的协议</h4><ul><li>HTTP（Hypertext Transfer Protocol，超文本传输协议），主要用于普通浏览。</li><li>HTTPS（HTTP over SSL，安全超文本传输协议）,HTTP协议的安全版本。</li><li>FTP（File Transfer Protocol，文件传输协议），用于文件传输。</li><li>POP3（Post Office Protocol, version 3，邮局协议），收邮件用。</li><li>SMTP（Simple Mail Transfer Protocol，简单邮件传输协议），用来发送电子邮件。</li><li>TELNET（Teletype over the Network，网络电传），通过一个终端（terminal）登陆到网络。</li><li>SSH（Secure Shell，用于替代安全性差的TELNET），用于加密安全登陆用。</li></ul><h4 id="运行在udp协议上的协议" tabindex="-1"><a class="header-anchor" href="#运行在udp协议上的协议" aria-hidden="true">#</a> 运行在UDP协议上的协议</h4><ul><li>BOOTP（Boot Protocol，启动协议），应用于无盘设备。</li><li>NTP（Network Time Protocol，网络时间协议），用于网络同步。</li><li>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），动态配置IP地址。</li></ul><h4 id="运行在tcp和udp协议上" tabindex="-1"><a class="header-anchor" href="#运行在tcp和udp协议上" aria-hidden="true">#</a> 运行在TCP和UDP协议上</h4><ul><li>DNS（Domain Name Service，域名服务），用于完成地址查找，邮件转发等工作。</li><li>ECHO（Echo Protocol，回绕协议），用于查错及测量应答时间（运行在TCP和UDP协议上）。</li><li>SNMP（Simple Network Management Protocol，简单网络管理协议），用于网络信息的收集和网络管理。</li><li>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），动态配置IP地址。</li><li>ARP（Address Resolution Protocol，地址解析协议），用于动态解析以太网硬件的地址。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。</li><li>虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li><li>对数据准确性要求高，速度可以相对较慢的，可以选用TCP</li></ul>',81),P=[s];function o(u,T){return e(),i("div",null,P)}const f=a(n,[["render",o],["__file","index.html.vue"]]);export{f as default};
